<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://tooyi.github.io</id>
    <title>涂诣</title>
    <updated>2020-05-27T01:18:20.896Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://tooyi.github.io"/>
    <link rel="self" href="https://tooyi.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://tooyi.github.io/images/avatar.png</logo>
    <icon>https://tooyi.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 涂诣</rights>
    <entry>
        <title type="html"><![CDATA[换一个新主题 - Gridea Themes Vant]]></title>
        <id>https://tooyi.github.io/post/hello-gridea/</id>
        <link href="https://tooyi.github.io/post/hello-gridea/">
        </link>
        <updated>2020-05-26T11:00:00.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="访问旧博客">访问旧博客</h2>
<p><strong>新博客使用Gridea管理，旧博客文章暂时未全部搬运。若访问旧博客，请访问</strong><a href="https://tooyi.github.io/blog-old/">涂诣的官方网站</a></p>
<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="访问旧博客">访问旧博客</h2>
<p><strong>新博客使用Gridea管理，旧博客文章暂时未全部搬运。若访问旧博客，请访问</strong><a href="https://tooyi.github.io/blog-old/">涂诣的官方网站</a></p>
<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PHP 爬虫]]></title>
        <id>https://tooyi.github.io/post/php-pa-chong/</id>
        <link href="https://tooyi.github.io/post/php-pa-chong/">
        </link>
        <updated>2019-04-02T01:14:30.000Z</updated>
        <summary type="html"><![CDATA[<p>学习参考小结</p>
]]></summary>
        <content type="html"><![CDATA[<p>学习参考小结</p>
<!-- more -->
<h2 id="简单获取百度title">简单获取百度title</h2>
<pre><code class="language-php">&lt;?PHP
   // 通过 file_get_contents 函数获取百度页面源码
   $html = file_get_contents(&quot;https://www.baidu.com/index.html&quot;);

   // 通过 preg_replace 函数使页面源码由多行变单行
   $htmlOneLine = preg_replace(&quot;/\r|\n|\t/&quot;,&quot;&quot;,$html);

   // 通过 preg_match 函数提取获取页面的标题信息
   preg_match(&quot;/&lt;title&gt;(.*)&lt;\/title&gt;/iU&quot;,$htmlOneLine,$titleArr);

   // 由于 preg_match 函数的结果是数组的形式
   $title = $titleArr[1];

   // 通过 echo 函数输出标题信息
   echo $title;
?&gt;
</code></pre>
<h2 id="乱码解决">乱码解决</h2>
<pre><code class="language-php">&lt;?PHP
   // 乱码解决办法，把其他编码格式通过 mb_convert_encoding 函数统一转为 UTF-8 格式
   $html = mb_convert_encoding($html,'UTF-8','UTF-8,GBK,GB2312,BIG5');
   // 还有一种因为gzip所以出现乱码的，我会在以后讲
?&gt;
</code></pre>
<h2 id="获取不到标题信息">获取不到标题信息</h2>
<pre><code class="language-php">&lt;?PHP
// 获取不到标题信息解决办法，首先判断是否能获取到页面源码
// 如果能获取到但还是不能获取到标题信息
// 我猜测的问题是：因为是使用正则表达式获取的，源码没有变成一行，获取起来就会出现问题
$htmlOneLine=preg_replace(&quot;/\r|\n|\t/&quot;,&quot;&quot;,$html);
?&gt;
</code></pre>
<h2 id="获取不到页面源码">获取不到页面源码</h2>
<pre><code class="language-php">&lt;?PHP
   // 像新浪微博你可能获取到的是“Sina Visitor System”
   // 解决办法添加header信息
   $opts = array(
   	'http'=&gt;array(
		'method'=&gt;&quot;GET&quot;,
		&quot;timeout&quot;=&gt;20,
		'header'=&gt;&quot;User-Agent: Spider \r\n&quot;,
   	)
   );
   $context = stream_context_create($opts);
   $html = file_get_contents($domain,0,$context,0,150000);
   // 这样就能获取到新浪微博的页面了
?&gt;
</code></pre>
<h2 id="爬取图片">爬取图片</h2>
<pre><code class="language-php">&lt;?php
header(&quot;Content-type:text/html;Charset=utf-8&quot;);

$ch = curl_init();
$url = &quot;https://pixabay.com/&quot;;
curl_setopt($ch, CURLOPT_USERAGENT, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.113 Safari/537.36&quot;);
curl_setopt($ch, CURLOPT_URL, $url);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
$content = curl_exec($ch);
$string = file_get_contents($url);
preg_match_all(&quot;/&lt;img([^&gt;]*)\s*src=('|\&quot;)([^'\&quot;]+)('|\&quot;)/&quot;,
    $string, $matches);
$new_arr = array_unique($matches[3]);
foreach ($new_arr as $key) {
    echo &quot;&lt;img src=$key&gt;&quot;;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在线学习SQL]]></title>
        <id>https://tooyi.github.io/post/zai-xian-xue-xi-sql/</id>
        <link href="https://tooyi.github.io/post/zai-xian-xue-xi-sql/">
        </link>
        <updated>2019-03-28T01:12:52.000Z</updated>
        <summary type="html"><![CDATA[<p>推荐几个在线学习SQL的网页</p>
]]></summary>
        <content type="html"><![CDATA[<p>推荐几个在线学习SQL的网页</p>
<!-- more -->
<h2 id="sql-fiddle">SQL Fiddle</h2>
<p>地址：<a href="http://sqlfiddle.com/">http://sqlfiddle.com/</a></p>
<p>提供有MySQL5.6、Oracle11g R2、PostgreSQL9.6及9.3、SQLite（WedSQL）、SQLite（SQL.js)、MS SQL Server 2017.</p>
<p>总体体验不错。</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/smartBBer/picBox/master/img/006KCUaNly1g1iphw4eu2j31hw0u0goo.jpg" alt="" loading="lazy"></figure>
<h2 id="sqlzoo">SQLZOO</h2>
<p>地址：<a href="http://zh.sqlzoo.net/wiki/SELECT_basics/zh">http://zh.sqlzoo.net/wiki/SELECT_basics/zh</a></p>
<p>SQL练习网站</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/smartBBer/picBox/master/img/006KCUaNly1g1ipi8mqyjj317y0s5gof.jpg" alt="" loading="lazy"></figure>
<p>做了下前两篇，附上答案。</p>
<h3 id="sqlzoo-前两节-select-basics-和-select-name-的答案">SQLZOO 前两节 SELECT basics 和 SELECT name 的答案。</h3>
<h4 id="select-basic">SELECT basic</h4>
<p>1.修改此例子,以顯示德國 Germany 的人口。</p>
<pre><code>  SELECT population FROM world WHERE name = 'Germany'
</code></pre>
<p>2.修改此例子,查詢面積為 5,000,000 以上平方公里的國家,對每個國家顯示她的名字和人均國內生產總值(gdp/population)。</p>
<pre><code>SELECT name, gdp/population FROM world WHERE area &gt; 5000000
</code></pre>
<p>3.顯示“Ireland 愛爾蘭”,“Iceland 冰島”,“Denmark 丹麥”的國家名稱和人口。</p>
<pre><code>SELECT name, population FROM world WHERE name IN ('Ireland', 'Iceland', 'Denmark');
</code></pre>
<p>4.修改此例子,以顯示面積為 200,000 及 250,000 之間的國家名稱和該國面積。</p>
<pre><code>SELECT name, area FROM world WHERE area BETWEEN 200000 AND 250000
</code></pre>
<h4 id="select-names">SELECT names</h4>
<p>1.找出以 Y 為開首的國家。</p>
<pre><code>SELECT name FROM world WHERE name LIKE 'Y%'
</code></pre>
<p>2.找出以 Y 為結尾的國家。</p>
<pre><code>SELECT name FROM world WHERE name LIKE '%Y'
</code></pre>
<p>3.找出所有國家,其名字包括字母x。</p>
<pre><code>SELECT name FROM world WHERE name LIKE '%x%'
</code></pre>
<p>4.找出所有國家,其名字以 land 作結尾。</p>
<pre><code>SELECT name FROM world WHERE name LIKE '%land'
</code></pre>
<p>5.找出所有國家,其名字以 C 作開始,ia 作結尾。</p>
<pre><code>SELECT name FROM world WHERE name LIKE 'C%ia'
</code></pre>
<p>6.找出所有國家,其名字包括字母oo。</p>
<pre><code>SELECT name FROM world WHERE name LIKE '%oo%'
</code></pre>
<p>7.找出所有國家,其名字包括三個或以上的a。</p>
<pre><code>SELECT name FROM world WHERE name LIKE '%a%a%a%'
</code></pre>
<p>8.找出所有國家,其名字以t作第二個字母。</p>
<pre><code>SELECT name FROM world WHERE name LIKE '_t%' ORDER BY name
</code></pre>
<p>9.找出所有國家,其名字都有兩個字母 o,被另外兩個字母相隔着。</p>
<pre><code>SELECT name FROM world WHERE name LIKE '%o__o%' ORDER BY name
</code></pre>
<p>10.找出所有國家,其名字都是 4 個字母的。</p>
<pre><code>SELECT name FROM world WHERE name LIKE '____'
</code></pre>
<p>11.顯示所有國家名字,其首都和國家名字是相同的</p>
<pre><code>SELECT name FROM world WHERE name = capital
</code></pre>
<p>12.顯示所有國家名字,其首都是國家名字加上” City”。</p>
<pre><code>SELECT name  FROM world WHERE capital = concat(name, ' City')
</code></pre>
<p>13.找出所有首都和其國家名字,而首都要有國家名字中出現。</p>
<pre><code>SELECT capital, name FROM world WHERE capital LIKE concat('%',name,'%')
</code></pre>
<p>14.找出所有首都和其國家名字,而首都是國家名字的延伸。 你應顯示 Mexico City,因它比其國家名字 Mexico 長。 你不應顯示 Luxembourg,因它的首都和國家名相是相同的。</p>
<pre><code>SELECT name, capital FROM world WHERE capital LIKE concat('%',name,'_%')
</code></pre>
<p>15.&quot;Monaco-Ville&quot;是合併國家名字 &quot;Monaco&quot; 和延伸詞&quot;-Ville&quot;.<br>
顯示國家名字，及其延伸詞，如首都是國家名字的延伸。</p>
<pre><code>SELECT name, REPLACE(capital, name, '') FROM world WHERE capital LIKE CONCAT('%',name,'%') AND REPLACE(capital, name, '') &lt;&gt; ''
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Oracle学习小结]]></title>
        <id>https://tooyi.github.io/post/oracle-xue-xi-xiao-jie/</id>
        <link href="https://tooyi.github.io/post/oracle-xue-xi-xiao-jie/">
        </link>
        <updated>2019-03-28T01:10:46.000Z</updated>
        <summary type="html"><![CDATA[<p>最近学习Oracle，做个小总结</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近学习Oracle，做个小总结</p>
<!-- more -->
<h1 id="oracle-预备知识">Oracle 预备知识</h1>
<h2 id="1oracle数据库中查询操作的基本语法">1.Oracle数据库中查询操作的基本语法</h2>
<pre><code class="language-sql">SELECT [ALL|DISTINCT]column_name[,expression…]
FROM  table1_name[,table2_name,view_name,…]
[WHERE condition]
[GROUP BY column_name1[,column_name2,…] [HAVING group_condition]]
[ORDER BY column_name2 [ASC|DESC][,column_name2,…]];
</code></pre>
<h2 id="2常用的统计聚集函数">2.常用的统计（聚集）函数</h2>
<table>
<thead>
<tr>
<th style="text-align:center">函    数</th>
<th style="text-align:center">格    式</th>
<th style="text-align:center">功    能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">COUNT</td>
<td style="text-align:center">COUNT([DISTINCT|ALL] *)</td>
<td style="text-align:center">返回结果集中记录个数</td>
</tr>
<tr>
<td style="text-align:center">COUNT</td>
<td style="text-align:center">COUNT([DISTINCT|ALL] column)</td>
<td style="text-align:center">返回结果集中非空记录个数</td>
</tr>
<tr>
<td style="text-align:center">AVG</td>
<td style="text-align:center">AVG([DISTINCT|ALL] column)</td>
<td style="text-align:center">返回列或表达式的平均值</td>
</tr>
<tr>
<td style="text-align:center">MAX</td>
<td style="text-align:center">MAX([DISTINCT|ALL] column )</td>
<td style="text-align:center">返回列或表达式的最大值</td>
</tr>
<tr>
<td style="text-align:center">MIN</td>
<td style="text-align:center">MIN([DISTINCT|ALL] column )</td>
<td style="text-align:center">返回列或表达式的最小值</td>
</tr>
<tr>
<td style="text-align:center">SUM</td>
<td style="text-align:center">SUM([DISTINCT|ALL] column )</td>
<td style="text-align:center">返回列或表达式的总和</td>
</tr>
<tr>
<td style="text-align:center">STDDEV</td>
<td style="text-align:center">STDDEV(column)</td>
<td style="text-align:center">返回列或表达式的标准差</td>
</tr>
<tr>
<td style="text-align:center">VARIANCE</td>
<td style="text-align:center">VARIANCE(column)</td>
<td style="text-align:center">返回列或表达式的方差</td>
</tr>
</tbody>
</table>
<ul>
<li>除了COUNT(*)函数外，其他的统计函数都不考虑返回值或表达式为NULL的情况。</li>
<li>聚集函数只能出现在目标列表达式、ORDER BY子句、HAVING子句中，不能出现在WHERE子句和GROUP BY子句中。</li>
<li>默认对所有的返回行进行统计，包括重复的行；如果要统计不重复的行信息，则可以使用DISTINCT选项。</li>
<li>如果对查询结果进行了分组，则聚集函数的作用范围为各个组，否则聚集函数作用于整个查询结果。</li>
</ul>
<h2 id="创建表和数据">创建表和数据</h2>
<pre><code class="language-sql">CREATE TABLE customers(
customer_id NUMBER(2) PRIMARY KEY,
name CHAR(10) NOT NULL,
phone VARCHAR(15) NOT NULL,
email VARCHAR(15),
address VARCHAR(30),
code VARCHAR(10)
);

CREATE TABLE publishers(
publisher_id NUMBER(2) PRIMARY KEY,
name VARCHAR(32),
contact CHAR(10),
phone VARCHAR(15)
);

CREATE TABLE books(
isbn VARCHAR(15) PRIMARY KEY,
title VARCHAR(15),
pubdate DATE,
publisher_id NUMBER(2) REFERENCES publishers(publisher_id),
cost NUMBER(4,2),
retail NUMBER(4,2),
category VARCHAR(15)
);

CREATE TABLE authors(
author_id NUMBER(2) PRIMARY KEY,
name VARCHAR(15));
CREATE TABLE bookauthor(
isbn VARCHAR(15) REFERENCES books(isbn),
author_id NUMBER(2) REFERENCES authors(author_id),
primary key(isbn,author_id)
);

CREATE TABLE orders(
order_id NUMBER(2) PRIMARY KEY,
customer_id NUMBER(2) REFERENCES customers(customer_id),
orderdate DATE NOT NULL,
shipdate DATE NOT NULL,
shipaddress VARCHAR(30),
shipcode VARCHAR(10)
);

CREATE TABLE orderitem(
ttem_id NUMBER(2) PRIMARY KEY,
order_id NUMBER(2) REFERENCES orders(order_id),
isbn VARCHAR(15) REFERENCES books(isbn),
quantity NUMBER(2)
);
</code></pre>
<h2 id="瞎写的数据">瞎写的数据</h2>
<pre><code class="language-sql">INSERT INTO customers VALUES(1,'小李','13300000000','1222@qq.com','东莞','122121');
INSERT INTO customers VALUES(2,'小刘','13300000000','1222@qq.com','上海浦东','122121');
INSERT INTO customers VALUES(3,'小王','13300000000','1222@qq.com','北京大学','122121');
INSERT INTO customers VALUES(4,'小张','13300000000','1222@qq.com','清华大学','122121');
insert into customers values(5,'小宋','123456','2222@qq.com','湖南大学','421000' );
insert into customers values(6,'小岳','234567','1111@qq.com','北京中关村','421000' );

insert into publishers values(1,'东四出版社','给予','345678');
insert into publishers values(2,'清华大学出版社','清华','345678');
insert into publishers values(3,'电子工业出版社','电工','345678');

insert into books values('0001','数据结构',sysdate,1,25.25,30.00,'计算机类');
insert into books values('0002','算法设计',to_date('2009-01-01','yyyy-mm-dd'),1,34.24,42.00,'计算机类');
insert into books values('0003','python',to_date('1996-12-03','yyyy-mm-dd') ,1,34.24,41.00,'计算机类');
insert into books values('0004','数据库大全',to_date('1990-12-03','yyyy-mm-dd') ,2,34.24,90.00,'计算机类');
insert into books values('0005','Oracle解读',to_date('2007-02-03','yyyy-mm-dd') ,3,34.40,90.00,'计算机类');
insert into books values('0006','java',to_date('2007-02-03','yyyy-mm-dd') ,1,34.40,90.00,'计算机类');
insert into books values('0007','大海',sysdate,1,25.25,30.00,'文学类');
insert into books values('0008','非我',sysdate,1,25.25,30.00,'哲学类');

insert into authors values(1,'廖雪峰');
insert into authors values(2,'唐三');

insert into bookauthor values('0001',1);
insert into bookauthor values('0002',2);

insert into orders values(1,1,sysdate,sysdate,'新华书店','421000');
insert into orders values(2,2,to_date ( '2007-11-20 18:31:34' , 'YYYY-MM-DD HH24:MI:SS' ),to_date ( '2007-12-30 18:31:34' , 'YYYY-MM-DD HH24:MI:SS' ),'新华书店','421000');
insert into orders values(3,3,sysdate,sysdate,'电子工业出版社','421000');
insert into orders values(4,4,to_date ( '2007-12-20 18:31:34' , 'YYYY-MM-DD HH24:MI:SS' ),to_date ( '2007-12-21 18:31:34' , 'YYYY-MM-DD HH24:MI:SS' ),'清华大学出版社','421000');

insert into orderitem values(1,1,'0001',20);
insert into orderitem values(2,2,'0002',20);
</code></pre>
<h2 id="查询">查询</h2>
<p>以下查询基于图书销售系统表</p>
<p>（1） 查询当前所有客户信息。</p>
<pre><code class="language-sql">select * from customers;
</code></pre>
<p>（2） 查询图书ISBN、书名、批发价以及零售价信息。</p>
<pre><code class="language-sql">select isbn,title,cost,retail from books;
</code></pre>
<p>（3） 查询所有图书的种类。</p>
<pre><code class="language-sql">select DISTINCT category from books;
</code></pre>
<p>（4） 查询图书ISBN、图书名及作者名信息。</p>
<pre><code class="language-sql">select books.isbn,books.title,authors.name from books inner join bookauthor on books.isbn=bookauthor.isbn join authors on authors.author_id=bookauthor.author_id;
</code></pre>
<p>（5） 查询所有订单信息。</p>
<pre><code class="language-sql">select * from orders;
</code></pre>
<p>（6） 查询所有出版社信息。</p>
<pre><code class="language-sql">select * from publishers;
</code></pre>
<p>（7） 查询所有订单明细信息。</p>
<pre><code class="language-sql">select * from orderitem;
</code></pre>
<p>（8） 查询出版日期在2009年1月1日之后的图书信息。</p>
<pre><code class="language-sql">select * from books where pubdate &gt; to_date('2009-01-01','yyyy-mm-dd');
</code></pre>
<p>（9） 查询所有图书ISBN、图书名、出版日期，并按出版日期降序排序。</p>
<pre><code class="language-sql">select isbn,title,pubdate from books order by pubdate desc;
</code></pre>
<p>（10）  查询所有图书ISBN、图书名、出版社、出版日期，按批发价格排序，对于批发价相同的，再按零售价排序。</p>
<pre><code class="language-sql">select * from books inner join publishers on books.publisher_id=publishers.publisher_id order by cost,retail;
</code></pre>
<p>（11）  查询图书名以“数据库”开头的图书信息。</p>
<pre><code class="language-sql">select * from books where title like '数据库%';
</code></pre>
<p>（12）  查询所有书名中包含“Oracle”的图书信息。</p>
<pre><code class="language-sql">select * from books where title like '%Oracle%';
</code></pre>
<p>（13）  查询出版日期在2007年1月至2009年1月的所有图书。</p>
<pre><code class="language-sql">select * from books where pubdate &gt;= to_date('2007-01-01','yyyy-mm-dd') and pubdate &lt;= to_date('2009-1-31','yyyy-mm-dd');
</code></pre>
<p>（14）  查询“电子工业出版社”和“清华大学出版社”出版的图书。</p>
<pre><code class="language-sql">select * from books join publishers on books.publisher_id=publishers.publisher_id and (publishers.name like '清华大学出版社' or publishers.name like '电子工业出版社');
</code></pre>
<p>（15）  查询所有订单信息，按订单日期排序。对于订单日期相同的，再按发货日期排序。</p>
<pre><code class="language-sql">select * from orders order by orderdate,shipdate; 
</code></pre>
<p>（16）  查询所有发货日期比订货日期晚７天的订单信息。</p>
<pre><code class="language-sql">select * from orders where (to_number(shipdate-orderdate))&gt;=7; 
</code></pre>
<p>（17）  统计各类图书的数量，平均零售价格、平均批发价格。</p>
<pre><code class="language-sql">select category,count(*),avg(retail),avg(cost) from books GROUP BY category;
</code></pre>
<p>（18）  统计各个出版社出版图书的数量、最高批发价格、最高零售价格、最低批发价格和最低零售价格。</p>
<pre><code class="language-sql">select name,count(*),max(cost),max(retail),min(cost),min(retail) from books join publishers on books.publisher_id =publishers.publisher_id GROUP BY name;
</code></pre>
<p>（19）  统计每个客户的订单数量。</p>
<pre><code class="language-sql">select name,count(*) from orders join customers on orders.customer_id=customers.customer_id group by name;
</code></pre>
<p>（20）  统计每个作者编写的图书数量。</p>
<pre><code class="language-sql">select name,count(*) from bookauthor join authors on authors.author_id=bookauthor.author_id group by name;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nginx 命令]]></title>
        <id>https://tooyi.github.io/post/nginx/</id>
        <link href="https://tooyi.github.io/post/nginx/">
        </link>
        <updated>2019-03-03T01:05:54.000Z</updated>
        <summary type="html"><![CDATA[<p>Windows下Nginx的启动、停止等命令</p>
]]></summary>
        <content type="html"><![CDATA[<p>Windows下Nginx的启动、停止等命令</p>
<!-- more -->
<h2 id="windows下nginx的启动-停止等命令">Windows下Nginx的启动、停止等命令</h2>
<p>在Windows下使用Nginx，我们需要掌握一些基本的操作命令，比如：启动、停止Nginx服务，重新载入Nginx等，下面我就进行一些简单的介绍。</p>
<h3 id="1-启动">1、启动：</h3>
<p>C:\server\nginx-1.0.2&gt;start nginx或<br>
C:\server\nginx-1.0.2&gt;nginx.exe</p>
<h3 id="2-停止">2、停止：</h3>
<p>C:\server\nginx-1.0.2&gt;nginx.exe -s stop或<br>
C:\server\nginx-1.0.2&gt;nginx.exe -s quit</p>
<blockquote>
<p>注：stop是快速停止nginx，可能并不保存相关信息；quit是完整有序的停止nginx，并保存相关信息。</p>
</blockquote>
<h3 id="3-配置文件修改重新载入nginx">3、配置文件修改重新载入Nginx：</h3>
<p>C:\server\nginx-1.0.2&gt;nginx.exe -s reload<br>
当配置信息修改，需要重新载入这些配置时使用此命令。</p>
<h3 id="4-重新打开日志文件">4、重新打开日志文件：</h3>
<p>C:\server\nginx-1.0.2&gt;nginx.exe -s reopen</p>
<h3 id="5-查看nginx版本">5、查看Nginx版本：</h3>
<p>C:\server\nginx-1.0.2&gt;nginx -v</p>
<h3 id="6-验证配置是否正确">6、验证配置是否正确:</h3>
<p>C:\server\nginx-1.0.2&gt;nginx -t</p>
<h3 id="7查看是否启动成功">7.查看是否启动成功：</h3>
<p>C:\server\nginx-1.0.2&gt;tasklist /fi &quot;imagename eq nginx.exe&quot;</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[WNMP 配置]]></title>
        <id>https://tooyi.github.io/post/wnmp/</id>
        <link href="https://tooyi.github.io/post/wnmp/">
        </link>
        <updated>2019-03-03T01:05:54.000Z</updated>
        <summary type="html"><![CDATA[<p>win10 + nginx + php7 + mysql</p>
]]></summary>
        <content type="html"><![CDATA[<p>win10 + nginx + php7 + mysql</p>
<!-- more -->
<h2 id="1首先需要的应用程序包">1.首先需要的应用程序包。</h2>
<p>PHP: <a href='https://windows.php.net/download' target='_blank'>VC15 x64 Non Thread Safe (2019-Feb-06 02:14:41)</a>（nginx 下 php 是以 FastCGI 的方式运行，所以我们下载非线程安全也就是nts的php包）</p>
<p>Nginx: <a href = 'http://nginx.org/en/download.html' target='_blank'>nginx/Windows-1.14.2</a> （下载 stable version）</p>
<p>MySql：<a href='https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.15-winx64.zip' target='_blank'>mysql-8.0.15-winx64.zip</a></p>
<p>MySql8.xx 的可以参考这个贴 <a href='https://blog.csdn.net/qq_37350706/article/details/81707862' target='_blank'>MySQL 8.0.15安装教程(windows 64位)</a></p>
<p>附一个用了比较久的 MySql 界面管理器</p>
<p>免费的 Navicat Premium 非商业版许可证：<a href = 'https://www.navicat.com.cn/sponsorship/education/student' target = '_blank'>学术伙伴计划 - 学生</a> 有一个教育邮箱就可以申请</p>
<h2 id="2安装与配置">2.安装与配置。</h2>
<h3 id="1php安装与配置">1）php安装与配置。</h3>
<p>将下载好的 php 包文件解压到某一个目录下，例如我的是：D:\wnmp。把解压后的文件目录改为 php7，将里面的 php.ini-production 文件复制一份并改名为 php.ini，用文本编辑器将它打开。</p>
<pre><code class="language-ini">;将里面的
; On windows:

extension_dir = &quot;./txt&quot;
;改为

; On windows:

extension_dir = &quot;D:/wnmp/php7/ext&quot;
</code></pre>
<p>将下面两个扩展前面的“;”去掉。（因为 php7 不支持 mysql 扩展了，所以这里只有 mysqli 和 pdo 扩展)</p>
<pre><code class="language-ini">;extension=mysqli 

;extension=pdo_mysql

;extension=openssl
</code></pre>
<p>最后让PHP支持 nginx，将下面一行前面的“;”去掉。</p>
<pre><code class="language-ini">;cgi.fix_pathinfo=1
</code></pre>
<h3 id="2nginx-安装与配置">2）nginx 安装与配置。</h3>
<p>先在 D:/wnmp 目录下新建一个 www 文件夹，作为服务器的根目录。</p>
<p>将下载好的 nginx 包文件解压到D:\wnmp目录下，重命名为 nginx。打开 nginx\conf 下的 nginx.conf 文件来配置 nginx。</p>
<pre><code class="language-conf">#将一下代码

location/ {
    root html;
    index index.html index.htm;
}

#改为

location/ {
root D:/wnmp/www; #将站点的根目录定位到 D:/wnmp/www

index index.html index.htm;
}  

#再将一下代码

# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
#
#location ~ \.php$ {
# root html;
# fastcgi_pass 127.0.0.1:9000;
# fastcgi_index index.php;
# fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name;
# include fastcgi_params;
#}

#改为
# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
#

location ~ \.php$ {
    root           D:/wnmp/www;
    fastcgi_pass   localhost:9000;
    fastcgi_index  index.php;
    
    # 这里$document_root指的是上面定义好的nginx根目录：D:/wnmp/www

    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
    include        fastcgi_params;
}
#保存好配置即可。
</code></pre>
<h2 id="3启动">3.启动。</h2>
<p>手动启动 php 和 nginx 来跑一下。</p>
<h3 id="1命令行php目录下键入-php-cgiexe-b-1270019000-c-dwnmpphp7phpini输入以后没有反应但是不能关掉命令行">1）命令行php目录下键入 php-cgi.exe -b 127.0.0.1:9000 -c D:/wnmp/php7/php.ini（输入以后没有反应，但是不能关掉命令行）</h3>
<h3 id="2命令行nginx目录下-start-nginx">2）命令行nginx目录下 start nginx</h3>
<h3 id="3在www目录下新建一个-phpinfophp-文件">3）在www目录下新建一个 phpinfo.php 文件</h3>
<pre><code>&lt;?php 
    phpinfo();
?&gt;
</code></pre>
<h3 id="4浏览器中输入-a-hrefhttplocalhostphpinfophp-target_blanklocalhostphpinfophpa-或者-a-hrefhttp127001phpinfophp-target_blank127001phpinfophpa出现下面内容则说明php在nginx中运行成功了">4）浏览器中输入 <a href='http://localhost/phpinfo.php' target='_blank'>localhost/phpinfo.php</a> 或者 <a href='http://127.0.0.1/phpinfo.php' target='_blank'>127.0.0.1/phpinfo.php</a>，出现下面内容则说明php在nginx中运行成功了。</h3>
<figure data-type="image" tabindex="1"><img src="http://ww1.sinaimg.cn/large/006KCUaNgy1g0og4i2gzfj30qi0gl77i.jpg" alt="成功啦" loading="lazy"></figure>
<p>本文参考 <a href="http://www.cnblogs.com/huayangmeng/archive/2011/06/15/2081337.html">http://www.cnblogs.com/huayangmeng/archive/2011/06/15/2081337.html</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[composer 脱坑记]]></title>
        <id>https://tooyi.github.io/post/composer-tuo-keng-ji/</id>
        <link href="https://tooyi.github.io/post/composer-tuo-keng-ji/">
        </link>
        <updated>2019-03-02T01:04:16.000Z</updated>
        <summary type="html"><![CDATA[<p>解决composer update太慢</p>
]]></summary>
        <content type="html"><![CDATA[<p>解决composer update太慢</p>
<!-- more -->
<h3 id="composer-介绍">composer 介绍</h3>
<p>Composer 是 PHP5.3以上 的一个依赖管理工具。它允许你声明项目所依赖的代码库，它会在你的项目中为你安装他们。Composer 不是一个包管理器。是的，它涉及 &quot;packages&quot; 和 &quot;libraries&quot;，但它在每个项目的基础上进行管理，在你项目的某个目录中（例如 vendor）进行安装。默认情况下它不会在全局安装任何东西。因此，这仅仅是一个依赖管理。</p>
<h3 id="那么问题来了">那么，问题来了</h3>
<blockquote>
<p>composer update 太慢，怎么解决</p>
</blockquote>
<blockquote>
<p>卡在这里怎么办</p>
</blockquote>
<pre><code>Loading composer repositories with package information
Updating dependencies (including require-dev)
</code></pre>
<p>后来看到这里：</p>
<p>https://pkg.phpcomposer.com/#how-to-install-composer</p>
<h3 id="方法一">方法一</h3>
<p>打开命令行窗口（windows用户）或控制台（Linux、Mac 用户）并执行如下命令</p>
<pre><code>composer config -g repo.packagist composer https://packagist.phpcomposer.com
</code></pre>
<h3 id="方法二-修改当前项目的-composerjson-配置文件">方法二： 修改当前项目的 composer.json 配置文件：</h3>
<p>打开命令行窗口（windows用户）或控制台（Linux、Mac 用户），进入你的项目的根目录（也就是 composer.json 文件所在目录），执行如下命令：</p>
<pre><code>composer config repo.packagist composer https://packagist.phpcomposer.com
</code></pre>
<p>上述命令将会在当前项目中的 composer.json 文件的末尾自动添加镜像的配置信息（你也可以自己手工添加）：</p>
<pre><code class="language-js">&quot;repositories&quot;: {
    &quot;packagist&quot;: {
        &quot;type&quot;: &quot;composer&quot;,
        &quot;url&quot;: &quot;https://packagist.phpcomposer.com&quot;
    }
}
</code></pre>
<p><strong>如果方法一不管用，尝试下方法二。</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[懒加载与预加载]]></title>
        <id>https://tooyi.github.io/post/lan-jia-zai-yu-yu-jia-zai/</id>
        <link href="https://tooyi.github.io/post/lan-jia-zai-yu-yu-jia-zai/">
        </link>
        <updated>2019-02-20T01:02:39.000Z</updated>
        <summary type="html"><![CDATA[<p>什么是懒加载、预加载？</p>
]]></summary>
        <content type="html"><![CDATA[<p>什么是懒加载、预加载？</p>
<!-- more -->
<h1 id="懒加载">懒加载</h1>
<h2 id="1什么是懒加载">1.什么是懒加载？</h2>
<p>懒加载也就是<strong>延迟加载</strong>。<br>
当访问一个页面的时候，先把img元素或是其他元素的背景图片路径替换成一张大小为1*1px图片的路径（这样就只需请求一次，俗称占位图），只有当图片出现在浏览器的可视区域内时，才设置图片正真的路径，让图片显示出来。这就是图片懒加载。</p>
<h2 id="2为什么要使用懒加载">2.为什么要使用懒加载？</h2>
<p>很多页面，内容很丰富，页面很长，图片较多。比如说各种商城页面。这些页面图片数量多，而且比较大，少说百来K，多则上兆。要是页面载入就一次性加载完毕。估计大家都会等到黄花变成黄花菜了。</p>
<h2 id="3懒加载的原理是什么">3.懒加载的原理是什么？</h2>
<p>页面中的img元素，如果没有src属性，浏览器就不会发出请求去下载图片，只有通过javascript设置了图片路径，浏览器才会发送请求。<br>
懒加载的原理就是先在页面中把所有的图片统一使用一张占位图进行占位，把正真的路径存在元素的“data-url”（这个名字起个自己认识好记的就行）属性里，要用的时候就取出来，再设置；</p>
<h2 id="4懒加载的实现步骤">4.懒加载的实现步骤？</h2>
<p>1)首先，不要将图片地址放到src属性中，而是放到其它属性(data-original)中。<br>
2)页面加载完成后，根据scrollTop判断图片是否在用户的视野内，如果在，则将data-original属性中的值取出存放到src属性中。<br>
3)在滚动事件中重复判断图片是否进入视野，如果进入，则将data-original属性中的值取出存放到src属性中。</p>
<h2 id="5懒加载的优点是什么">5.懒加载的优点是什么？</h2>
<p>页面加载速度快、可以减轻服务器的压力、节约了流量,用户体验好</p>
<pre><code class="language-js">//懒加载代码实现
var viewHeight = document.documentElement.clientHeight // 可视区域的高度

function lazyload () {
  // 获取所有要进行懒加载的图片
  var eles = document.querySelectorAll('img[data-original][lazyload]')
  Array.prototype.forEach.call(eles, function (item, index) {
    var rect
    if (item.dataset.original === '')
      return
    rect = item.getBoundingClientRect()
    // 图片一进入可视区，动态加载
    if (rect.bottom &gt;= 0 &amp;&amp; rect.top &lt; viewHeight) {
      !function () {
        var img = new Image()
        img.src = item.dataset.original
        img.onload = function () {
          item.src = img.src
        }
        item.removeAttribute('data-original')
        item.removeAttribute('lazyload')
      }()
    }
  })
}
// 首屏要人为的调用，否则刚进入页面不显示图片
lazyload()

document.addEventListener('scroll', lazyload)

</code></pre>
<h1 id="预加载">预加载</h1>
<p>预加载的<strong>核心要点</strong>如下：</p>
<p>1.图片等静态资源在使用之前的提前请求；</p>
<p>2.资源后续使用时可以从缓存中加载，提升用户体验；</p>
<p>3.页面展示的依赖关系维护（必需的资源加载完才可以展示页面，防止白屏等）；</p>
<p>实现预加载主要有三个方法：</p>
<p>1.html中img标签最初设置为display:none；</p>
<p>2.js脚本中使用image对象动态创建好图片；</p>
<p>3.使用XMLHttpRequest对象可以更加精细的控制预加载过程，缺点是无法跨域：</p>
<h2 id="1什么是预加载">1.什么是预加载？</h2>
<p>提前加载图片，当用户需要查看时可直接从本地缓存中渲染</p>
<h2 id="2为什么要使用预加载">2.为什么要使用预加载？</h2>
<p>图片预先加载到浏览器中，访问者便可顺利地在你的网站上冲浪，并享受到极快的加载速度。这对图片画廊及图片占据很大比例的网站来说十分有利，它保证了图片快速、无缝地发布，也可帮助用户在浏览你网站内容时获得更好的用户体验。</p>
<h2 id="3实现预加载的方法有哪些">3.实现预加载的方法有哪些？</h2>
<p>方法一：用CSS和JavaScript实现预加载<br>
方法二：仅使用JavaScript实现预加载<br>
方法三：使用Ajax实现预加载</p>
<p>详见：<a href="http://web.jobbole.com/86785/">Javascript图片预加载详解</a></p>
<h2 id="3-懒加载和预加载的对比">3、懒加载和预加载的对比</h2>
<h3 id="1概念">1)概念：</h3>
<p>懒加载也叫延迟加载：JS图片延迟加载,延迟加载图片或符合某些条件时才加载某些图片。<br>
预加载：提前加载图片，当用户需要查看时可直接从本地缓存中渲染。</p>
<h3 id="2区别">2)区别：</h3>
<p>两种技术的本质：两者的行为是相反的，一个是提前加载，一个是迟缓甚至不加载。懒加载对服务器前端有一定的缓解压力作用，预加载则会增加服务器前端压力。</p>
<h3 id="3懒加载的意义及实现方式有">3)懒加载的意义及实现方式有：</h3>
<p>意义：<br>
懒加载的主要目的是作为服务器前端的优化，减少请求数或延迟请求数。<br>
实现方式：<br>
1.第一种是纯粹的延迟加载，使用setTimeOut或setInterval进行加载延迟.<br>
2.第二种是条件加载，符合某些条件，或触发了某些事件才开始异步下载。<br>
3.第三种是可视区加载，即仅加载用户可以看到的区域，这个主要由监控滚动条来实现，一般会在距用户看到某图片前一定距离遍开始加载，这样能保证用户拉下时正好能看到图片。</p>
<h3 id="4预加载的意义及实现方式有">4)预加载的意义及实现方式有：</h3>
<p>意义:<br>
预加载可以说是牺牲服务器前端性能，换取更好的用户体验，这样可以使用户的操作得到最快的反映。<br>
实现方式：<br>
实现预载的方法非常多，比如：用CSS和JavaScript实现预加载；仅使用JavaScript实现预加载；使用Ajax实现预加载。<br>
常用的是new Image();设置其src来实现预载，再使用onload方法回调预载完成事件。只要浏览器把图片下载到本地，同样的src就会使用缓存，这是最基本也是最实用的预载方法。当Image下载完图片头后，会得到宽和高，因此可以在预载前得到图片的大小(方法是用记时器轮循宽高变化)。</p>
<h2 id="4-补充知识">4、补充知识</h2>
<p>屏幕可视窗口大小</p>
<pre><code class="language-js">  原生方法： 

        window.innerHeight 标准浏览器及IE9+ || 

        document.documentElement.clientHeight 标准浏览器及低版本IE标准模式 || 

        document.body.clientHeight  低版本混杂模式 

    jQuery方法：  

        $(window).height();
</code></pre>
<p>浏览器窗口顶部与文档顶部之间的距离，也就是滚动条滚动的距离：</p>
<pre><code class="language-js"> 原生方法： 

          window.pagYoffset 标准浏览器及IE9+ || 

          document.documentElement.scrollTop 兼容ie低版本的标准模式 || 

          document.body.scrollTop 兼容混杂模式； 

    jQuery方法： 

          $(document).scrollTop();
</code></pre>
<p>获取元素的尺寸</p>
<pre><code class="language-js">$(o).width() = o.style.width;
$(o).innerWidth() = o.style.width+o.style.padding;
$(o).outerWidth() = o.offsetWidth = o.style.width+o.style.padding+o.style.border；
$(o).outerWidth(true) = o.style.width+o.style.padding+o.style.border+o.style.margin；
</code></pre>
<p><strong>注意</strong><br>
要使用原生的style.xxx方法获取属性，这个元素必须已经有内嵌的样式，如果原先是通过外部或内部样式表定义css样式，必须使用o.currentStyle[xxx] || document.defaultView.getComputedStyle(0)[xxx]来获取样式值。</p>
<p>获取元素的位置信息</p>
<pre><code class="language-js">jQuery：
$(o).offset().top&lt;/code&gt;元素距离文档顶的距离&lt;br&gt;&lt;code&gt;$(o).offset().left元素距离文档左边缘的距离。
原生：getoffsetTop();
顺便提一下返回元素相对于第一个以定位的父元素的偏移距离，注意与上面偏移距的区别；
jQuery：position()返回一个对象
$(o).position().left = o.style.left;&lt;/code&gt;&lt;br&gt;&lt;code&gt;$(o).position().top = o.style.top； 
</code></pre>
<p>来源：<a href="http://www.jianshu.com/p/4876a4fe7731">懒加载和预加载</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[微信小程序---flex布局]]></title>
        <id>https://tooyi.github.io/post/wei-xin-xiao-cheng-xu-flex-bu-ju/</id>
        <link href="https://tooyi.github.io/post/wei-xin-xiao-cheng-xu-flex-bu-ju/">
        </link>
        <updated>2019-02-16T00:59:35.000Z</updated>
        <summary type="html"><![CDATA[<p>代码记录</p>
]]></summary>
        <content type="html"><![CDATA[<p>代码记录</p>
<!-- more -->
<h2 id="微信小程序-flex布局">微信小程序---flex布局</h2>
<h3 id="基础代码">基础代码</h3>
<pre><code class="language-html">&lt;!-- .wxml --&gt;
&lt;view class='container'&gt;
  &lt;view class='chunk color1'&gt;1&lt;/view&gt;
  &lt;view class='chunk color2'&gt;2&lt;/view&gt;
  &lt;view class='chunk color3'&gt;3&lt;/view&gt;
&lt;/view&gt;
</code></pre>
<pre><code class="language-css">/* .wxss */
.chunk{
  height: 100px;
  width: 100px;
}
.container {
  height: 400px;
  background: #898989;
}
.color1{
  background-color: red;
}
.color2{
  background-color: blue;
}
.color3{
  background-color: pink;
}
</code></pre>
<h3 id="view-组件">view 组件</h3>
<p>使用 view 组件时，默认是<strong>列向</strong>排列</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/smartBBer/picBox/master/img/006KCUaNgy1g08b6atmocj30af0ih0st.jpg" alt="默认view布局" loading="lazy"></figure>
<h4 id="view-组件更改排列方向">view 组件更改排列方向</h4>
<ol>
<li>display: inline;</li>
</ol>
<p>使用 display: inline; 可以实现横向排列，但是<strong>不能设置高度和宽度</strong>，代码中虽然设置，但是无作用。</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/smartBBer/picBox/master/img/006KCUaNgy1g08bkji2uqj30af0ih74b.jpg" alt="display: inline;" loading="lazy"></figure>
<pre><code class="language-css">/* .wxss */
/* 增加 display: inline; */
.chunk{
  height: 100px;
  width: 100px;
  display: inline;
}
.container {
  height: 400px;
  background: #898989;
}
.color1{
  background-color: red;
}
.color2{
  background-color: blue;
}
.color3{
  background-color: pink;
}
</code></pre>
<ol start="2">
<li>display: inline-block;</li>
</ol>
<p>inline-block 可以设置高度和宽度。</p>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/smartBBer/picBox/master/img/006KCUaNgy1g08blqsls0j30af0iit8q.jpg" alt="display: inline-block;" loading="lazy"></figure>
<pre><code class="language-css">/* .wxss */
/* 增加 display: inline-block; */
.chunk{
  height: 100px;
  width: 100px;
  display: inline-block;
}
.container {
  height: 400px;
  background: #898989;
}
.color1{
  background-color: red;
}
.color2{
  background-color: blue;
}
.color3{
  background-color: pink;
}
</code></pre>
<h3 id="flex">flex</h3>
<p>而当使用 flex 布局时，默认是<strong>横向</strong>排列</p>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/smartBBer/picBox/master/img/006KCUaNgy1g08bc0r8eoj30af0ifdfq.jpg" alt="flex默认布局" loading="lazy"></figure>
<pre><code class="language-css">/* .wxss */
/* 使用flex布局 */
.chunk{
  height: 100px;
  width: 100px;
}
.container {
  height: 400px;
  display: flex;
  background: #898989;
}
.color1{
  background-color: red;
}
.color2{
  background-color: blue;
}
.color3{
  background-color: pink;
}
</code></pre>
<h4 id="更改排列方向">更改排列方向</h4>
<figure data-type="image" tabindex="5"><img src="https://raw.githubusercontent.com/smartBBer/picBox/master/img/006KCUaNgy1g08bt0zmt6j30af0i73yl.jpg" alt="flex-direction: column;" loading="lazy"></figure>
<pre><code class="language-css">/* .wxss */
/* flex-direction: row; 实现行内排列， column实现列内排列*/
.chunk{
  height: 100px;
  width: 100px;
}
.container {
  height: 400px;
  display: flex;
  background: #898989;
}
.color1{
  background-color: red;
}
.color2{
  background-color: blue;
}
.color3{
  background-color: pink;
}
</code></pre>
<p>使用 flex 布局还有一个方便实现的功能 ————实现 view 组件的倒序排列<br>
只需要加一个 flex-direction: row-reverse;</p>
<figure data-type="image" tabindex="6"><img src="https://raw.githubusercontent.com/smartBBer/picBox/master/img/006KCUaNgy1g08c5qhavgj30af0ieq30.jpg" alt="flex-direction: row-reverse;" loading="lazy"></figure>
<pre><code class="language-css">/* .wxss */
/* flex-direction: row-reverse;  实现行内倒序排列 column-reverse;*/
.chunk{
  height: 100px;
  width: 100px;
}
.container {
  height: 400px;
  display: flex;
  background: #898989;
  flex-direction: column-reverse;
}
.color1{
  background-color: red;
}
.color2{
  background-color: blue;
}
.color3{
  background-color: pink;
}
</code></pre>
<p>这时候发现一个问题，现在是从底部开始排列的，想要在顶部开始排列，加上 justify-content: flex-end;</p>
<figure data-type="image" tabindex="7"><img src="https://raw.githubusercontent.com/smartBBer/picBox/master/img/006KCUaNgy1g08c8wxg6pj30af0ijjrh.jpg" alt="justify-content: flex-end;" loading="lazy"></figure>
<pre><code class="language-css">/* .wxss */
/*   justify-content: flex-end;*/
/* justify-content: space-between; 平均分布  center 剧中分布  space-around 等距分布 */
.chunk{
  height: 100px;
  width: 100px;
}
.container {
  height: 400px;
  display: flex;
  background: #898989;
  flex-direction: column-reverse;
  justify-content: flex-end;
}
.color1{
  background-color: red;
}
.color2{
  background-color: blue;
}
.color3{
  background-color: pink;
}
</code></pre>
<p>这时仔细的你发现，flex-end 不是应该是从底部开始排列的？</p>
<p>再仔细的你就会发现，前面加入了 flex-direction: column-reverse; 反转了一下，所以 flex-end 就变成 flex-start 的效果了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[json格式化插件]]></title>
        <id>https://tooyi.github.io/post/json-ge-shi-hua-cha-jian/</id>
        <link href="https://tooyi.github.io/post/json-ge-shi-hua-cha-jian/">
        </link>
        <updated>2019-01-23T00:57:33.000Z</updated>
        <summary type="html"><![CDATA[<p>chrome浏览器-json格式化插件</p>
]]></summary>
        <content type="html"><![CDATA[<p>chrome浏览器-json格式化插件</p>
<!-- more -->
<h3 id="第一步">第一步</h3>
<p>下载json 的JSON-Handle插件：地址：<a href="http://jsonhandle.sinaapp.com/">http://jsonhandle.sinaapp.com/</a></p>
<h3 id="第二步">第二步</h3>
<p>打开浏览器—&gt;右键点击三个点—&gt;更多工具—&gt;扩展程序—&gt;将crx插件拖入浏览器</p>
<h3 id="这时候你运行你的程序">这时候你运行你的程序</h3>
<p>出现以下结果说明已经成功安装成功。</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/smartBBer/picBox/master/img/006KCUaNgy1fzgln4pwpaj313g0vgmzq.jpg" alt="效果图" loading="lazy"></figure>
<h3 id="欢迎关注我的微信公众号">欢迎关注我的微信公众号</h3>
<figure data-type="image" tabindex="2"><img src="http://upload-images.jianshu.io/upload_images/3990834-c91d28f8be4121e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="微信公众号：柏战不殆" loading="lazy"></figure>
]]></content>
    </entry>
</feed>