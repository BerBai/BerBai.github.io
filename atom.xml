<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://tooyi.github.io</id>
    <title>涂诣</title>
    <updated>2020-05-26T13:44:21.331Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://tooyi.github.io"/>
    <link rel="self" href="https://tooyi.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://tooyi.github.io/images/avatar.png</logo>
    <icon>https://tooyi.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 涂诣</rights>
    <entry>
        <title type="html"><![CDATA[记录 - 学习Git遇到的坑]]></title>
        <id>https://tooyi.github.io/post/ji-lu-xue-xi-git-yu-dao-de-keng/</id>
        <link href="https://tooyi.github.io/post/ji-lu-xue-xi-git-yu-dao-de-keng/">
        </link>
        <updated>2020-05-26T13:39:42.000Z</updated>
        <content type="html"><![CDATA[<h2 id="学习git遇到的坑">学习Git遇到的坑</h2>
<hr>
<blockquote>
<p>如果不明白文中指令含义，建议查看 <a href="https://smartbber.github.io/2018/01/23/Git%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/">Git 笔记整理</a></p>
</blockquote>
<h3 id="1-git-commit-遇到-errorpathspec">1. <code>git commit</code> 遇到 <code>error：pathspec</code></h3>
<p>原因：输入 <code>git commit -m &quot;messages&quot;</code> 时，忘记加 <code>-u</code> 。</p>
<h3 id="2-git-commit-am-messages-不能提交新增文件">2. <code>git commit -am &quot;messages&quot;</code> ，不能提交新增文件</h3>
<p>先使用 <code>git add -A</code> ，提交全部新增文件，再使用 <code>git commit -m &quot;messages&quot;</code> 。</p>
<h3 id="3-有时候-git-push-origin-master-会报错如下">3. 有时候 git push origin master 会报错，如下：</h3>
<pre><code class="language-Git">$ git push origin master
To github.com:smartBBer/LeetCode.git
 ! [rejected]        master -&gt; master (fetch first)
error: failed to push some refs to 'git@github.com:smartBBer/LeetCode.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

</code></pre>
<p>错误原因很简单：<strong>本地库和GitHub中的库不同步</strong>，解决办法有两种。</p>
<h4 id="第一种解决方法不要轻易使用">第一种解决方法(不要轻易使用)</h4>
<p>加上 <code>-f</code>，强制推送上去，这时你的GitHub上的库会以本地同步，</p>
<pre><code>$ git push -f
Enumerating objects: 35, done.
Counting objects: 100% (35/35), done.
Delta compression using up to 4 threads
Compressing objects: 100% (24/24), done.
Writing objects: 100% (35/35), 6.35 KiB | 325.00 KiB/s, done.
Total 35 (delta 6), reused 6 (delta 1)
remote: Resolving deltas: 100% (6/6), done.
To github.com:smartBBer/LeetCode.git
 + 0794cc5...80639ea master -&gt; master (forced update)
</code></pre>
<h4 id="第二种解决方法推荐">第二种解决方法（推荐）</h4>
<p>使用<code>git pull --rebase origin master</code>合并 GitHub 和 本地 的库，本地会多出之前不同步的文件，在使用 <code>git push -u origin master</code> 推送到 GitHub 库中。</p>
<pre><code>$ git pull --rebase origin master
$ git push origin master
</code></pre>
<pre><code>fatal: 'origin' does not appear to be a git repository
fatal: Could not read from remote repository.
Please make sure you have the correct access rights and the repository exists.
</code></pre>
<p>解决办法：重新输入一次：<code>git remote add origin git@github.com:yourusername/test.git</code></p>
<pre><code>fatal: remote error:
XXXXXX is not a valid repository name Email support@github.com for help
</code></pre>
<p>解决办法：<strong>使用git remote rm origin 然后再使用上传命令</strong></p>
<h3 id="4-输入git-remote-add-origin-gitgithubcomyournameyourrepogit时">4. 输入：<code>git remote add origin git@github.com:yourName/yourRepo.git</code>时</h3>
<pre><code>fatal: Not a git repository (or any of the parent directories): .git
</code></pre>
<p>解决办法：<strong>输入 git init ，初始化一个本地仓库</strong></p>
<pre><code>fatal: remote origin already exists.
</code></pre>
<p>解决办法：<br>
<strong>1 删除Git仓库中的origin信息：git remote rm origin</strong></p>
<p><strong>2 重新添加Git仓库中的origin信息</strong></p>
<h3 id="5-输入git-add-时">5. 输入git add ./时</h3>
<pre><code>fatal: Not a git repository (or any of the parent directories): .git
</code></pre>
<p>解决办法：<strong>先输入git init，再add</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[换一个新主题 - Gridea Themes Vant]]></title>
        <id>https://tooyi.github.io/post/hello-gridea/</id>
        <link href="https://tooyi.github.io/post/hello-gridea/">
        </link>
        <updated>2020-05-26T11:00:00.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="访问旧博客">访问旧博客</h2>
<p><strong>新博客使用Gridea管理，旧博客文章暂时未全部搬运。若访问旧博客，请访问</strong><a href="https://tooyi.github.io/blog-old/">涂诣的官方网站</a></p>
<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="访问旧博客">访问旧博客</h2>
<p><strong>新博客使用Gridea管理，旧博客文章暂时未全部搬运。若访问旧博客，请访问</strong><a href="https://tooyi.github.io/blog-old/">涂诣的官方网站</a></p>
<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[记录 - 学习Git遇到的坑]]></title>
        <id>https://tooyi.github.io/post/git-notes/</id>
        <link href="https://tooyi.github.io/post/git-notes/">
        </link>
        <updated>2018-09-07T13:39:42.000Z</updated>
        <content type="html"><![CDATA[<h2 id="学习git遇到的坑">学习Git遇到的坑</h2>
<hr>
<blockquote>
<p>如果不明白文中指令含义，建议查看 <a href="https://smartbber.github.io/2018/01/23/Git%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/">Git 笔记整理</a></p>
</blockquote>
<h3 id="1-git-commit-遇到-errorpathspec">1. <code>git commit</code> 遇到 <code>error：pathspec</code></h3>
<p>原因：输入 <code>git commit -m &quot;messages&quot;</code> 时，忘记加 <code>-u</code> 。</p>
<h3 id="2-git-commit-am-messages-不能提交新增文件">2. <code>git commit -am &quot;messages&quot;</code> ，不能提交新增文件</h3>
<p>先使用 <code>git add -A</code> ，提交全部新增文件，再使用 <code>git commit -m &quot;messages&quot;</code> 。</p>
<h3 id="3-有时候-git-push-origin-master-会报错如下">3. 有时候 git push origin master 会报错，如下：</h3>
<pre><code class="language-Git">$ git push origin master
To github.com:smartBBer/LeetCode.git
 ! [rejected]        master -&gt; master (fetch first)
error: failed to push some refs to 'git@github.com:smartBBer/LeetCode.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

</code></pre>
<p>错误原因很简单：<strong>本地库和GitHub中的库不同步</strong>，解决办法有两种。</p>
<h4 id="第一种解决方法不要轻易使用">第一种解决方法(不要轻易使用)</h4>
<p>加上 <code>-f</code>，强制推送上去，这时你的GitHub上的库会以本地同步，</p>
<pre><code>$ git push -f
Enumerating objects: 35, done.
Counting objects: 100% (35/35), done.
Delta compression using up to 4 threads
Compressing objects: 100% (24/24), done.
Writing objects: 100% (35/35), 6.35 KiB | 325.00 KiB/s, done.
Total 35 (delta 6), reused 6 (delta 1)
remote: Resolving deltas: 100% (6/6), done.
To github.com:smartBBer/LeetCode.git
 + 0794cc5...80639ea master -&gt; master (forced update)
</code></pre>
<h4 id="第二种解决方法推荐">第二种解决方法（推荐）</h4>
<p>使用<code>git pull --rebase origin master</code>合并 GitHub 和 本地 的库，本地会多出之前不同步的文件，在使用 <code>git push -u origin master</code> 推送到 GitHub 库中。</p>
<pre><code>$ git pull --rebase origin master
$ git push origin master
</code></pre>
<pre><code>fatal: 'origin' does not appear to be a git repository
fatal: Could not read from remote repository.
Please make sure you have the correct access rights and the repository exists.
</code></pre>
<p>解决办法：重新输入一次：<code>git remote add origin git@github.com:yourusername/test.git</code></p>
<pre><code>fatal: remote error:
XXXXXX is not a valid repository name Email support@github.com for help
</code></pre>
<p>解决办法：<strong>使用git remote rm origin 然后再使用上传命令</strong></p>
<h3 id="4-输入git-remote-add-origin-gitgithubcomyournameyourrepogit时">4. 输入：<code>git remote add origin git@github.com:yourName/yourRepo.git</code>时</h3>
<pre><code>fatal: Not a git repository (or any of the parent directories): .git
</code></pre>
<p>解决办法：<strong>输入 git init ，初始化一个本地仓库</strong></p>
<pre><code>fatal: remote origin already exists.
</code></pre>
<p>解决办法：<br>
<strong>1 删除Git仓库中的origin信息：git remote rm origin</strong></p>
<p><strong>2 重新添加Git仓库中的origin信息</strong></p>
<h3 id="5-输入git-add-时">5. 输入git add ./时</h3>
<pre><code>fatal: Not a git repository (or any of the parent directories): .git
</code></pre>
<p>解决办法：<strong>先输入git init，再add</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git笔记整理]]></title>
        <id>https://tooyi.github.io/post/git/</id>
        <link href="https://tooyi.github.io/post/git/">
        </link>
        <updated>2018-01-23T13:25:08.000Z</updated>
        <content type="html"><![CDATA[<h1 id="git笔记整理">Git笔记整理</h1>
<h2 id="git简介">Git简介</h2>
<ul>
<li>Git是分布式版本控制系统</li>
<li>集中式VS分布式，SVN VS Git
<ol>
<li>SVN和Git主要的区别在于历史版本维护的位置</li>
<li>Git本地仓库包含代码库还有历史库，在本地的环境开发就可以记录历史而SVN的历史库存在于中央仓库，每次对比与提交代码都必须连接到中央仓库才能进行。</li>
<li>这样的好处在于：
<ul>
<li>自己可以在脱机环境查看开发的版本历史。</li>
<li>多人开发时如果充当中央仓库的Git仓库挂了，可以随时创建一个新的中央仓库然后同步就立刻恢复了中央库。</li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="git命令">Git命令</h2>
<h3 id="git配置">Git配置</h3>
<pre><code>$ git config --global user.name &quot;Your Name&quot;
$ git config --global user.email &quot;email@example.com&quot;
</code></pre>
<p><code>git config</code>命令的<code>--global</code>参数，表明这台机器上的所有Git仓库都会使用这个配置，也可以对某个仓库指定不同的用户名和邮箱地址。</p>
<h3 id="创建版本库">创建版本库</h3>
<h4 id="初始化一个git仓库">初始化一个Git仓库</h4>
<pre><code>$ git init
</code></pre>
<h4 id="添加文件到git仓库">添加文件到Git仓库</h4>
<p>包括两步：</p>
<pre><code>$ git add &lt;file&gt;
$ git commit -m &quot;description&quot;
</code></pre>
<p><code>git add</code>可以反复多次使用，添加多个文件，<code>git commit</code>可以一次提交很多文件，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容。</p>
<h3 id="查看工作区状态">查看工作区状态</h3>
<pre><code>$ git status
</code></pre>
<h3 id="查看修改内容">查看修改内容</h3>
<pre><code>$ git diff
</code></pre>
<pre><code>$ git diff --cached
</code></pre>
<pre><code>$ git diff HEAD -- &lt;file&gt;
</code></pre>
<ul>
<li><code>git diff</code> 可以查看工作区(work dict)和暂存区(stage)的区别</li>
<li><code>git diff --cached</code> 可以查看暂存区(stage)和分支(master)的区别</li>
<li><code>git diff HEAD -- &lt;file&gt;</code> 可以查看工作区和版本库里面最新版本的区别</li>
</ul>
<h3 id="查看提交日志">查看提交日志</h3>
<pre><code>$ git log
</code></pre>
<p>简化日志输出信息</p>
<pre><code>$ git log --pretty=oneline
</code></pre>
<h3 id="查看命令历史">查看命令历史</h3>
<pre><code>$ git reflog
</code></pre>
<h3 id="版本回退">版本回退</h3>
<pre><code>$ git reset --hard HEAD^
</code></pre>
<p>以上命令是返回上一个版本，在Git中，用<code>HEAD</code>表示当前版本，上一个版本就是<code>HEAD^</code>，上上一个版本是<code>HEAD^^</code>，往上100个版本写成<code>HEAD~100</code>。</p>
<h3 id="回退指定版本号">回退指定版本号</h3>
<pre><code>$ git reset --hard commit_id
</code></pre>
<p>commit_id是版本号，是一个用SHA1计算出的序列</p>
<h3 id="工作区-暂存区和版本库">工作区、暂存区和版本库</h3>
<p>工作区：在电脑里能看到的目录；<br>
版本库：在工作区有一个隐藏目录<code>.git</code>，是Git的版本库。<br>
Git的版本库中存了很多东西，其中最重要的就是称为stage（或者称为index）的暂存区，还有Git自动创建的<code>master</code>，以及指向<code>master</code>的指针<code>HEAD</code>。</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/smartBBer/picBox/master/img/006KCUaNgy1fv5innaz2sj30cq06ijri.jpg" alt="演示图" loading="lazy"></figure>
<p>进一步解释一些命令：</p>
<ul>
<li><code>git add</code>实际上是把文件添加到暂存区</li>
<li><code>git commit</code>实际上是把暂存区的所有内容提交到当前分支</li>
</ul>
<h3 id="撤销修改">撤销修改</h3>
<h4 id="丢弃工作区的修改">丢弃工作区的修改</h4>
<pre><code>$ git checkout -- &lt;file&gt;
</code></pre>
<p>该命令是指将文件在工作区的修改全部撤销，这里有两种情况：</p>
<ol>
<li>一种是file自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</li>
<li>一种是file已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</li>
</ol>
<p>总之，就是让这个文件回到最近一次git commit或git add时的状态。</p>
<h4 id="丢弃暂存区的修改">丢弃暂存区的修改</h4>
<p>分两步：<br>
第一步，把暂存区的修改撤销掉(unstage)，重新放回工作区：</p>
<pre><code>$ git reset HEAD &lt;file&gt;
</code></pre>
<p>第二步，撤销工作区的修改</p>
<pre><code>$ git checkout -- &lt;file&gt;
</code></pre>
<p>小结：</p>
<ol>
<li>
<p>当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- &lt;file&gt;</code>。</p>
</li>
<li>
<p>当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了第一步，第二步按第一步操作。</p>
</li>
<li>
<p>已经提交了不合适的修改到版本库时，想要撤销本次提交，进行版本回退，前提是没有推送到远程库。</p>
</li>
</ol>
<h3 id="删除文件">删除文件</h3>
<pre><code>$ git rm &lt;file&gt;
</code></pre>
<p><code>git rm &lt;file&gt;</code>相当于执行</p>
<pre><code>$ rm &lt;file&gt;
$ git add &lt;file&gt;
</code></pre>
<h4 id="进一步的解释">进一步的解释</h4>
<p>Q：比如执行了<code>rm text.txt</code> 误删了怎么恢复？<br>
A：执行<code>git checkout -- text.txt</code> 把版本库的东西重新写回工作区就行了<br>
Q：如果执行了<code>git rm text.txt</code>我们会发现工作区的text.txt也删除了，怎么恢复？<br>
A：先撤销暂存区修改，重新放回工作区，然后再从版本库写回到工作区</p>
<pre><code>$ git reset head text.txt
$ git checkout -- text.txt
</code></pre>
<p>Q：如果真的想从版本库里面删除文件怎么做？<br>
A：执行<code>git commit -m &quot;delete text.txt&quot;</code>，提交后最新的版本库将不包含这个文件</p>
<h3 id="远程仓库">远程仓库</h3>
<h4 id="创建ssh-key">创建SSH Key</h4>
<pre><code>$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;
</code></pre>
<h4 id="关联远程仓库">关联远程仓库</h4>
<pre><code>$ git remote add origin https://github.com/username/repositoryname.git
</code></pre>
<h4 id="推送到远程仓库">推送到远程仓库</h4>
<pre><code>$ git push -u origin master
</code></pre>
<p><code>-u</code> 表示第一次推送master分支的所有内容，此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改。</p>
<h4 id="从远程克隆">从远程克隆</h4>
<pre><code>$ git clone https://github.com/usern/repositoryname.git
</code></pre>
<h3 id="分支">分支</h3>
<h4 id="创建分支">创建分支</h4>
<pre><code>$ git branch &lt;branchname&gt;
</code></pre>
<h4 id="查看分支">查看分支</h4>
<pre><code>$ git branch
</code></pre>
<p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个*号。</p>
<h4 id="切换分支">切换分支</h4>
<pre><code>$ git checkout &lt;branchname&gt;
</code></pre>
<h4 id="创建切换分支">创建+切换分支</h4>
<pre><code>$ git checkout -b &lt;branchname&gt;
</code></pre>
<h4 id="合并某分支到当前分支">合并某分支到当前分支</h4>
<pre><code>$ git merge &lt;branchname&gt;
</code></pre>
<h4 id="删除分支">删除分支</h4>
<pre><code>$ git branch -d &lt;branchname&gt;
</code></pre>
<h4 id="查看分支合并图">查看分支合并图</h4>
<pre><code>$ git log --graph
</code></pre>
<p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。用<code>git log --graph</code>命令可以看到分支合并图。</p>
<h4 id="普通模式合并分支">普通模式合并分支</h4>
<pre><code>$ git merge --no-ff -m &quot;description&quot; &lt;branchname&gt;
</code></pre>
<p>因为本次合并要创建一个新的commit，所以加上<code>-m</code>参数，把commit描述写进去。合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，能看出来曾经做过合并，包含作者和时间戳等信息，而fast forward合并就看不出来曾经做过合并。</p>
<h4 id="保存工作现场">保存工作现场</h4>
<pre><code>$ git stash
</code></pre>
<h4 id="查看工作现场">查看工作现场</h4>
<pre><code>$ git stash list
</code></pre>
<h4 id="恢复工作现场">恢复工作现场</h4>
<pre><code>$ git stash pop
</code></pre>
<h4 id="丢弃一个没有合并过的分支">丢弃一个没有合并过的分支</h4>
<pre><code>$ git branch -D &lt;branchname&gt;
</code></pre>
<h4 id="查看远程库信息">查看远程库信息</h4>
<pre><code>$ git remote -v
</code></pre>
<h4 id="在本地创建和远程分支对应的分支">在本地创建和远程分支对应的分支</h4>
<pre><code>$ git checkout -b branch-name origin/branch-name，
</code></pre>
<p>本地和远程分支的名称最好一致；</p>
<h4 id="建立本地分支和远程分支的关联">建立本地分支和远程分支的关联</h4>
<pre><code>$ git branch --set-upstream branch-name origin/branch-name；
</code></pre>
<h4 id="从本地推送分支">从本地推送分支</h4>
<pre><code>$ git push origin branch-name
</code></pre>
<p>如果推送失败，先用git pull抓取远程的新提交；</p>
<h4 id="从远程抓取分支">从远程抓取分支</h4>
<pre><code>$ git pull
</code></pre>
<p>如果有冲突，要先处理冲突。</p>
<h3 id="标签">标签</h3>
<p>tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。</p>
<h4 id="新建一个标签">新建一个标签</h4>
<pre><code>$ git tag &lt;tagname&gt;
</code></pre>
<p>命令<code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为HEAD，也可以指定一个commit id。</p>
<h4 id="指定标签信息">指定标签信息</h4>
<pre><code>$ git tag -a &lt;tagname&gt; -m &lt;description&gt; &lt;branchname&gt; or commit_id
</code></pre>
<p><code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息。</p>
<h4 id="pgp签名标签">PGP签名标签</h4>
<pre><code>$ git tag -s &lt;tagname&gt; -m &lt;description&gt; &lt;branchname&gt; or commit_id
</code></pre>
<p><code>git tag -s &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以用PGP签名标签。</p>
<h4 id="查看所有标签">查看所有标签</h4>
<pre><code>$ git tag
</code></pre>
<h4 id="推送一个本地标签">推送一个本地标签</h4>
<pre><code>$ git push origin &lt;tagname&gt;
</code></pre>
<h4 id="推送全部未推送过的本地标签">推送全部未推送过的本地标签</h4>
<pre><code>$ git push origin --tags
</code></pre>
<h4 id="删除一个本地标签">删除一个本地标签</h4>
<pre><code>$ git tag -d &lt;tagname&gt;
</code></pre>
<h4 id="删除一个远程标签">删除一个远程标签</h4>
<pre><code>$ git push origin :refs/tags/&lt;tagname&gt;
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://tooyi.github.io/post-images/1590499958797.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>