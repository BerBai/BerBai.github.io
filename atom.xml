<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://tooyi.github.io</id>
    <title>涂诣</title>
    <updated>2020-05-27T01:25:00.588Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://tooyi.github.io"/>
    <link rel="self" href="https://tooyi.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://tooyi.github.io/images/avatar.png</logo>
    <icon>https://tooyi.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 涂诣</rights>
    <entry>
        <title type="html"><![CDATA[换一个新主题 - Gridea Themes Vant]]></title>
        <id>https://tooyi.github.io/post/hello-gridea/</id>
        <link href="https://tooyi.github.io/post/hello-gridea/">
        </link>
        <updated>2020-05-26T11:00:00.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="访问旧博客">访问旧博客</h2>
<p><strong>新博客使用Gridea管理，旧博客文章暂时未全部搬运。若访问旧博客，请访问</strong><a href="https://tooyi.github.io/blog-old/">涂诣的官方网站</a></p>
<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="访问旧博客">访问旧博客</h2>
<p><strong>新博客使用Gridea管理，旧博客文章暂时未全部搬运。若访问旧博客，请访问</strong><a href="https://tooyi.github.io/blog-old/">涂诣的官方网站</a></p>
<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数据库-函数依赖及范式]]></title>
        <id>https://tooyi.github.io/post/shu-ju-ku-han-shu-yi-lai-ji-fan-shi/</id>
        <link href="https://tooyi.github.io/post/shu-ju-ku-han-shu-yi-lai-ji-fan-shi/">
        </link>
        <updated>2020-04-27T01:23:52.000Z</updated>
        <summary type="html"><![CDATA[<p>通俗讲解</p>
]]></summary>
        <content type="html"><![CDATA[<p>通俗讲解</p>
<!-- more -->
<h1 id="数据库-函数依赖及范式通俗易懂">数据库-函数依赖及范式（通俗易懂）</h1>
<h2 id="一-基础概念">一、基础概念</h2>
<p>要理解范式，首先必须对知道什么是关系数据库，如果你不知道，我可以简单的不能再简单的说一下：关系数据库就是用二维表来保存数据。表和表之间可以……（省略10W字）。<br>
　　然后你应该理解以下概念：<br>
　　**实体：**现实世界中客观存在并可以被区别的事物。比如“一个学生”、“一本书”、“一门课”等等。值得强调的是这里所说的“事物”不仅仅是看得见摸得着的“东西”，它也可以是虚拟的，不如说“老师与学校的关系”。<br>
　　**属性：**教科书上解释为：“实体所具有的某一特性”，由此可见，属性一开始是个逻辑概念，比如说，“性别”是“人”的一个属性。在关系数据库中，属性又是个物理概念，属性可以看作是“表的一列”。<br>
　　**元组：**表中的一行就是一个元组。<br>
　　**分量：**元组的某个属性值。在一个关系数据库中，它是一个操作原子，即关系数据库在做任何操作的时候，属性是“不可分的”。否则就不是关系数据库了。<br>
　　**码：**表中可以唯一确定一个元组的某个属性（或者属性组），如果这样的码有不止一个，那么大家都叫候选码，我们从候选码中挑一个出来做老大，它就叫主码。<br>
　　**全码：**如果一个码包含了所有的属性，这个码就是全码。<br>
　　**主属性：**一个属性只要在任何一个候选码中出现过，这个属性就是主属性。<br>
　　**非主属性：**与上面相反，没有在任何候选码中出现过，这个属性就是非主属性。<br>
　　**外码：**一个属性（或属性组），它不是码，但是它别的表的码，它就是外码。</p>
<h2 id="二-6个范式">二、6个范式</h2>
<p>好了，上面已经介绍了我们掌握范式所需要的全部基础概念，下面我们就来讲范式。首先要明白，范式的包含关系。一个数据库设计如果符合第二范式，一定也符合第一范式。如果符合第三范式，一定也符合第二范式…</p>
<h3 id="第一范式1nf">第一范式（1NF）</h3>
<p><strong>属性不可分。</strong></p>
<p>在前面我们已经介绍了属性值的概念，我们说，它是“不可分的”。而第一范式要求属性也不可分。那么它和属性值不可分有什么区别呢？给一个例子：</p>
<table>
   <tr>
      <th>name</td>
      <th colspan='2'>tel</td>
      <th>age</td>
   </tr>
   <tr>
      <td>大宝</td>
      <td colspan='2'>13612345678</td>
      <td>22</td>
   </tr>
   <tr>
      <td>小明</td>
      <td>13988776655</td>
      <td>010－1234567</td>
      <td>21</td>
   </tr>
</table>
<p>Ps：这个表中，属性值“分”了。</p>
<table>
	<tr>
		<th rowspan='2'>name</td>
		<th colspan='2'>tel</td>
		<th colspan='2'>age</td>
	</tr>
	<tr>
        <td>手机</td>
		<td>座机</td>
	</tr>
	<tr>
		<td>大宝</td>
		<td>13612345678</td>
		<td>021－9876543</td>
		<td>22</td>
	</tr>
	<tr>
		<td>小明</td>
		<td>13988776655</td>
		<td>010－1234567</td>
		<td>21</td>
	</tr>
</table>
<p>Ps：这个表中，属性 “分”了。</p>
<p>这两种情况都不满足第一范式。不满足第一范式的数据库，不是关系数据库！所以，我们在任何关系数据库管理系统中，做不出这样的“表”来。（也就是说，<strong>只要是关系数据库就是第一范式</strong>）</p>
<h3 id="第二范式2nf">第二范式（2NF）</h3>
<p><strong>符合1NF，并且，非主属性完全依赖于码，消除部分依赖。</strong></p>
<p>听起来好像很神秘，其实真的没什么。<br>
　　一个候选码中的主属性也可能是好几个。如果一个主属性，它不能单独做为一个候选码，那么它也不能确定任何一个非主属性。给一个反例：我们考虑一个小学的教务 管理系统，学生上课指定一个老师，一本教材，一个教室，一个时间，大家都上课去吧，没有问题。那么数据库怎么设计？（学生上课表）</p>
<table>
<thead>
<tr>
<th>学生</th>
<th>课程</th>
<th>老师</th>
<th>老师职称</th>
<th>教材</th>
<th>教室</th>
<th>上课时间</th>
</tr>
</thead>
<tbody>
<tr>
<td>小明</td>
<td>一年级语文（上）</td>
<td>大宝</td>
<td>副教授</td>
<td>《小学语文1》</td>
<td>101</td>
<td>14：30</td>
</tr>
</tbody>
</table>
<p>一个学生上一门课，一定在特定某个教室。所以有（学生，课程）－&gt;教室<br>
一个学生上一门课，一定是特定某个老师教。所以有（学生，课程）－&gt;老师<br>
一个学生上一门课，他老师的职称可以确定。所以有（学生，课程）－&gt;老师职称<br>
一个学生上一门课，一定是特定某个教材。所以有（学生，课程）－&gt;教材<br>
一个学生上一门课，一定在特定时间。所以有（学生，课程）－&gt;上课时间</p>
<p>因此（学生，课程）是一个码。<br>
　　然而，一个课程，一定指定了某个教材，一年级语文肯定用的是《小学语文1》，那么就有课程－&gt;教材。（学生，课程）是个码，课程却决定了教材，这就叫做不完全依赖，或者说部分依赖。出现这样的情况，就不满足第二范式！<br>
　　有什么不好吗？你可以想想：<br>
　　1、校长要新增加一门课程叫“微积分”，教材是《大学数学》，怎么办？学生还没选课，而学生又是主属性，主属性不能空，课程怎么记录呢，教材记到哪呢? ……郁闷了吧?(插入异常)<br>
　　2、下学期没学生学一年级语文（上）了，学一年级语文（下）去了，那么表中将不存在一年级语文（上），也就没了《小学语文1》。这时候，校长问：一年级语文（上）用的什么教材啊？……郁闷了吧?(删除异常)<br>
　　3、校长说：一年级语文（上）换教材，换成《大学语文》。有10000个学生选了这么课，改动好大啊！改累死了……郁闷了吧？（修改异常）<br>
　　那应该怎么解决呢？投影分解，将一个表分解成两个或若干个表</p>
<table>
<thead>
<tr>
<th>学生</th>
<th>课程</th>
<th>老师</th>
<th>老师职称</th>
<th>教室</th>
<th>上课时间</th>
</tr>
</thead>
<tbody>
<tr>
<td>小明</td>
<td>一年级语文（上）</td>
<td>大宝</td>
<td>副教授</td>
<td>101</td>
<td>14：30</td>
</tr>
</tbody>
</table>
<p>学生上课表新</p>
<table>
<thead>
<tr>
<th>课程</th>
<th>教材</th>
</tr>
</thead>
<tbody>
<tr>
<td>一年级语文（上）</td>
<td>《小学语文1》</td>
</tr>
</tbody>
</table>
<p>课程的表</p>
<h3 id="第三范式3nf">第三范式（3NF）</h3>
<p><strong>符合2NF，并且，消除传递依赖</strong></p>
<p>上面的“学生上课表新”符合2NF，可以这样验证：两个主属性单独使用，不用确定其它四个非主属性的任何一个。但是它有传递依赖！<br>
　　在哪呢？问题就出在“老师”和“老师职称”这里。一个老师一定能确定一个老师职称。有什么问题吗？想想：<br>
　　1、老师升级了，变教授了，要改数据库，表中有N条，改了N次……（修改异常）<br>
　　2、没人选这个老师的课了，老师的职称也没了记录……（删除异常）<br>
　　3、新来一个老师，还没分配教什么课，他的职称记到哪？……（插入异常）<br>
　　那应该怎么解决呢？和上面一样，投影分解：</p>
<table>
<thead>
<tr>
<th>学生</th>
<th>课程</th>
<th>老师</th>
<th>教室</th>
<th>上课时间</th>
</tr>
</thead>
<tbody>
<tr>
<td>小明</td>
<td>一年级语文（上）</td>
<td>大宝</td>
<td>101</td>
<td>14：30</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>老师</th>
<th>老师职称</th>
</tr>
</thead>
<tbody>
<tr>
<td>大宝</td>
<td>副教授</td>
</tr>
</tbody>
</table>
<h3 id="bc范式bcnf">BC范式（BCNF）</h3>
<p><strong>符合3NF，并且，主属性不依赖于主属性</strong></p>
<p><strong>若关系模式属于第三范式，且每个属性都不传递依赖于键码，则属于BC范式。</strong></p>
<p>​		若某公司有若干个仓库；每个仓库只能有一名管理员，一名管理员只能在一个仓库中工作；一个仓库中可以存放多种物品，一种物品也可以存放在不同的仓库中。每种物品在每个仓库中都有对应的数量。<br>
那么关系模式 仓库（仓库名，管理员，物品名，数量） 属于哪一级范式？</p>
<p>​		已知函数依赖集：仓库名 → 管理员，管理员 → 仓库名，（仓库名，物品名）→ 数量<br>
​		码：（管理员，物品名），（仓库名，物品名）<br>
​		主属性：仓库名、管理员、物品名非主属性：数量<br>
​		∵ 不存在非主属性对码的部分函数依赖和传递函数依赖。<br>
​		∴ 此关系模式属于3NF。</p>
<p>​		好，既然此关系模式已经属于了 3NF，那么这个关系模式是否存在问题呢？我们来看以下几种操作：<br>
​		1.先新增加一个仓库，但尚未存放任何物品，是否可以为该仓库指派管理员？——不可以，因为物品名也是主属性，根据实体完整性的要求，主属性不能为空。<br>
某仓库被清空后，需要删除所有与这个仓库相关的物品存放记录，会带来什么问题？——仓库本身与管理员的信息也被随之删除了。<br>
​		2.如果某仓库更换了管理员，会带来什么问题？——这个仓库有几条物品存放记录，就要修改多少次管理员信息。<br>
​		从这里我们可以得出结论，在某些特殊情况下，即使关系模式符合 3NF 的要求，仍然存在着插入异常，修改异常与删除异常的问题，仍然不是 ”好“ 的设计。<br>
​		造成此问题的原因：存在着主属性对于码的部分函数依赖与传递函数依赖。（在此例中就是存在<strong>主属性</strong>【仓库名】对于<strong>码</strong>【（管理员，物品名）】的<strong>部分函数依赖</strong>。</p>
<p>​		解决办法就是要在 3NF 的基础上消除主属性对于码的部分与传递函数依赖。<br>
​		1.仓库表（仓库名，管理员）<br>
​		2.库存表（仓库名，物品名，数量）<br>
​		这样，之前的插入异常，修改异常与删除异常的问题就被解决了。</p>
<p>通常BC范式的条件有多种等价的表述：每个非平凡依赖的左边必须包含键码；每个决定因素必须包含键码。BC范式既检查非主属性，又检查主属性。当只检查非主属性时，就成了第三范式。满足BC范式的关系都必然满足第三范式。还可以这么说：<strong>若一个关系达到了第三范式，并且它只有一个候选码，或者它的每个候选码都是单属性，则该关系自然达到BC范式</strong>。</p>
<p>一般，一个数据库设计符合3NF或BCNF就可以了。在BC范式以上还有第四范式、第五范式。</p>
<h3 id="第四范式">第四范式</h3>
<p>​		<strong>要求把同一表内的多对多关系删除。</strong></p>
<h3 id="第五范式">第五范式</h3>
<p>​		<strong>从最终结构重新建立原始结构。</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[微信小程序 WXHL 中截取字符串]]></title>
        <id>https://tooyi.github.io/post/wei-xin-wxhl/</id>
        <link href="https://tooyi.github.io/post/wei-xin-wxhl/">
        </link>
        <updated>2019-07-02T01:21:52.000Z</updated>
        <summary type="html"><![CDATA[<p>代码记录</p>
]]></summary>
        <content type="html"><![CDATA[<p>代码记录</p>
<!-- more -->
<p>1.首先 在对应页面下新建  “  center.wxs   ” 文件 这个文件是小程序自身 一套脚本语言</p>
<p>2.在 .wxs  文件中 写 截取字符串的 方法</p>
<pre><code>// 小程序页面中 如何截取字符串
var substr = function(val) {
if (val.length == 0 || val == undefined) {
return false;
} else if (val.length &gt; 12) {
return val.substring(0,12) + &quot;...&quot;;
}else{
return val;
}
}
//暴露substr方法
module.exports.substr =substr
</code></pre>
<p>3.在center.wxml页面中 引入 <wxs src="./center.wxs" module="intercept" /></p>
<p>然后在  “   {{}}   ” 中  使用  ，如下</p>
<pre><code>&lt;view class='p'&gt;{{intercept.substr(item.evaluation.name)}}&lt;/view&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL读写分离]]></title>
        <id>https://tooyi.github.io/post/mysql-du-xie-fen-chi/</id>
        <link href="https://tooyi.github.io/post/mysql-du-xie-fen-chi/">
        </link>
        <updated>2019-06-20T01:20:43.000Z</updated>
        <summary type="html"><![CDATA[<p>Java高级面试必问系列</p>
]]></summary>
        <content type="html"><![CDATA[<p>Java高级面试必问系列</p>
<!-- more -->
<h2 id="为什么要读写分离">为什么要读写分离？</h2>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/smartBBer/picBox/master/img/20190620213528.png" alt="读写分离" loading="lazy"></figure>
<h2 id="mysql主从复制">Mysql主从复制</h2>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/smartBBer/picBox/master/img/20190620213833.png" alt="Mysql主从复制" loading="lazy"></figure>
<h2 id="mysql主从延迟导致的生产环境的问题">MySQL主从延迟导致的生产环境的问题</h2>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/smartBBer/picBox/master/img/20190620213941.png" alt="MySQL主从延迟导致的生产环境的问题" loading="lazy"></figure>
<p>进入正题，开始撞壁！</p>
<h2 id="1-面试题">1、面试题</h2>
<p>你们有没有做MySQL读写分离？<br>
如何实现mysql的读写分离？MySQL主从分离原理的是啥？如何解决mysql主从同步的延时问题？</p>
<h2 id="2-面试官心里分析">2、面试官心里分析</h2>
<p>这个，高并发这个阶段，那肯定是需要做读写分离的，啥意思？因为实际上大部分的互联网公司，一些网站，或者是app，其实都是读多写少。所以针对这个情况，就是写一个主库，但是主库挂多个从库，然后从多个从库来读，那不就可以支撑更高的读并发压力了吗？</p>
<h2 id="3-面试题剖析">3、面试题剖析</h2>
<h3 id="1如何实现mysql的读写分离">（1）如何实现mysql的读写分离？</h3>
<p>其实很简单，就是基于主从复制架构，简单来说，就搞一个主库，挂多个从库，然后我们就单单只是写主库，然后主库会自动把数据给同步到从库上去。</p>
<h3 id="2mysql主从复制原理的是啥">（2）MySQL主从复制原理的是啥？</h3>
<p>主库将变更写binlog日志，然后从库连接到主库之后，从库有一个IO线程，将主库的binlog日志拷贝到自己本地，写入一个中继日志中。接着从库中有一个SQL线程会从中继日志读取binlog，然后执行binlog日志中的内容，也就是在自己本地再次执行一遍SQL，这样就可以保证自己跟主库的数据是一样的。</p>
<p>这里有一个非常重要的一点，就是从库同步主库数据的过程是串行化的，也就是说主库上并行的操作，在从库上会串行执行。所以这就是一个非常重要的点了，由于从库从主库拷贝日志以及串行执行SQL的特点，在高并发场景下，从库的数据一定会比主库慢一些，是有延时的。</p>
<p>所以经常出现，刚写入主库的数据可能是读不到的，要过几十毫秒，甚至几百毫秒才能读取到。</p>
<p>而且这里还有另外一个问题，就是如果主库突然宕机，然后恰好数据还没同步到从库，那么有些数据可能在从库上是没有的，有些数据可能就丢失了。</p>
<p>所以mysql实际上在这一块有两个机制，一个是半同步复制，用来解决主库数据丢失问题；一个是并行复制，用来解决主从同步延时问题。 这个所谓半同步复制，semi-sync复制，指的就是主库写入binlog日志之后，就会将强制此时立即将数据同步到从库，从库将日志写入自己本地的relay log之后，接着会返回一个ack给主库，主库接收到至少一个从库的ack之后才会认为写操作完成了。 所谓并行复制，指的是从库开启多个线程，并行读取relay log中不同库的日志，然后并行重放不同库的日志，这是库级别的并行。</p>
<ol>
<li>主从复制的原理</li>
<li>主从延迟问题产生的原因</li>
<li>主从复制的数据丢失问题，以及半同步复制的原理</li>
<li>并行复制的原理，多库并发重放relay日志，缓解主从延迟问题</li>
</ol>
<h3 id="3mysql主从同步延时问题精华">（3）mysql主从同步延时问题（精华）</h3>
<p>线上确实处理过因为主从同步延时问题，导致的线上的bug，小型的生产事故 show status，Seconds_Behind_Master，你可以看到从库复制主库的数据落后了几ms 其实这块东西我们经常会碰到，就比如说用了mysql主从架构之后，可能会发现，刚写入库的数据结果没查到，结果就完蛋了。。。。</p>
<p>所以实际上你要考虑好应该在什么场景下来用这个mysql主从同步，建议是一般在读远远多于写，而且读的时候一般对数据时效性要求没那么高的时候，用mysql主从同步 所以这个时候，我们可以考虑的一个事情就是，你可以用mysql的并行复制，但是问题是那是库级别的并行，所以有时候作用不是很大</p>
<p>所以这个时候。。</p>
<p>通常来说，我们会对于那种写了之后立马就要保证可以查到的场景，采用强制读主库的方式，这样就可以保证你肯定的可以读到数据了吧。其实用一些数据库中间件是没问题的。</p>
<p>一般来说，如果主从延迟较为严重：</p>
<ol>
<li>分库，将一个主库拆分为4个主库，每个主库的写并发就500/s，此时主从延迟可以忽略不计</li>
<li>打开mysql支持的并行复制，多个库并行复制，如果说某个库的写入并发就是特别高，单库写并发达到了2000/s，并行复制还是没意义。28法则，很多时候比如说，就是少数的几个订单表，写入了2000/s，其他几十个表10/s。</li>
<li>重写代码，写代码的同学，要慎重，当时我们其实短期是让那个同学重写了一下代码，插入数据之后，直接就更新，不要查询</li>
<li>如果确实是存在必须先插入，立马要求就查询到，然后立马就要反过来执行一些操作，对这个查询设置直连主库。不推荐这种方法，你这么搞导致读写分离的意义就丧失了</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端学习路线]]></title>
        <id>https://tooyi.github.io/post/qian-duan-xue-xi-lu-xian/</id>
        <link href="https://tooyi.github.io/post/qian-duan-xue-xi-lu-xian/">
        </link>
        <updated>2019-04-05T01:18:35.000Z</updated>
        <summary type="html"><![CDATA[<p>维尔工作室卓子分享</p>
]]></summary>
        <content type="html"><![CDATA[<p>维尔工作室卓子分享</p>
<!-- more -->
<h2 id="成长路线">成长路线：</h2>
<h3 id="1熟悉开发环境">1.熟悉开发环境</h3>
<h4 id="a前端工具">a.前端工具：</h4>
<ul>
<li>Git
<ul>
<li>廖雪峰Git教程(https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/)</li>
<li>Git简明指南（http://www.bootcss.com/p/git-guide/）</li>
<li>Git基础教程（http://www.shouce.ren/api/view/a/7484）</li>
<li>Git教程（https://www.w3cschool.cn/git/）</li>
</ul>
</li>
<li>Github
<ul>
<li>Github学习--慕课网（http://www.imooc.com/learn/390）</li>
<li>Github简明教程（http://www.runoob.com/w3cnote/git-guide.html）</li>
</ul>
</li>
<li>sublime/WebStorm/Visual Studio Code
<ul>
<li>Sublime Text前端必备插件（根据自己需要安装）（https://www.jianshu.com/p/edbc2a13494b）</li>
<li>Sublime使用手册（https://www.w3cschool.cn/sublimetext/）</li>
<li>WebStorm的配置和使用（https://www.jianshu.com/p/f72dfac254ac）</li>
<li>Visual Studio Code简明教程（https://wenku.baidu.com/view/58c64e3ff02d2af90242a8956bec0975f465a43b.html）</li>
<li>Visual Studio Code插件（https://segmentfault.com/a/1190000006697219）</li>
</ul>
</li>
<li>Chrome DevTools
<ul>
<li>Chrome开发者工具不完全指南（http://web.jobbole.com/82558/）</li>
<li>Chrome开发者工具指南（https://www.w3cschool.cn/chromedevtools/）</li>
</ul>
</li>
<li>扩展：Markdown和SVN
<ul>
<li>Markdown--入门指南（https://www.jianshu.com/p/1e402922ee32/）</li>
<li>Github上README写法暨markdown语法解读（https://www.tuicool.com/articles/zIJrEjn）</li>
<li>SVN教程（http://www.runoob.com/svn/svn-tutorial.html）</li>
</ul>
</li>
</ul>
<h3 id="2熟悉页面切图">2.熟悉页面切图：</h3>
<h4 id="a前期准备ps切图">a.前期准备（PS切图）</h4>
<ul>
<li>i.慕课网切图学习（http://www.imooc.com/learn/506）</li>
<li>ii.PS切图教程（https://blog.csdn.net/obkoro1/article/details/69817571）</li>
</ul>
<h4 id="bhtml基础-css基础">b.HTML基础、CSS基础</h4>
<h5 id="ihtml">i.HTML</h5>
<h6 id="1学习目标">1.学习目标：</h6>
<p>a.熟悉HTML文档结构和文档类型<br>
b.熟悉块级元素和内联元素以及之间区别<br>
c.熟悉html表单元素及使用<br>
d.熟悉HTML注释<br>
e.熟悉代码规范：</p>
<ul>
<li>HTML规范（http://www.runoob.com/w3cnote/html-css-guide.html#html）</li>
<li>勤奋蜂前端编码规范（转载https://proyang.gitbooks.io/codeguide/）</li>
<li>HTML页面渲染机制、重绘和回流（http://blog.codingplayboy.com/2017/03/29/webpage_render/）<br>
g.自主学习HTML基础</li>
</ul>
<h6 id="2参考资料">2.参考资料</h6>
<p>a.HTML+CSS基础课程（http://www.imooc.com/learn/9）<br>
b.W3CSchool HTML教程（http://www.w3school.com.cn/html/index.asp）<br>
c.更多参考学习资料可自行网上查询</p>
<h6 id="3练习">3.练习</h6>
<p>a.百度前端学院任务一：零基础HTML编码（http://ife.baidu.com/2016/task/all）</p>
<h5 id="iicss">ii.CSS</h5>
<h6 id="1css相关知识及学习目标">1.CSS相关知识及学习目标</h6>
<p>a.熟悉CSS样式的语法<br>
b.熟悉内联样式、嵌入样式、外部样式、以及优先级<br>
c.熟悉CSS继承、层叠，样式<br>
d.熟悉CSS选择器<br>
e.熟悉CSS盒子模型<br>
f.熟悉CSS定位和浮动<br>
g.熟悉常用CSS样式的表现<br>
h.熟悉基本的布局方式<br>
i.Grid，Flexbox等布局方式<br>
j.熟悉使用CSS3 transform、transtion、animation<br>
k.熟悉厂商前缀</p>
<h6 id="2参考资料-2">2.参考资料</h6>
<ul>
<li>张鑫旭的CSS教程（http://www.imooc.com/u/197450/courses?sort=publish）</li>
<li>W3CSchool-CSS教程（http://www.w3school.com.cn/css/index.asp）</li>
<li>MDN盒模型(https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Getting_started/Boxes)</li>
<li>学习CSS布局（http://zh.learnlayout.com/no-layout.html）</li>
<li>双飞翼布局介绍-始于淘宝UED（http://www.imooc.com/wenda/detail/254035）</li>
<li>那些年我们一起清除过的浮动（http://www.iyunlu.com/view/css-xhtml/55.html）</li>
<li>BFC和hasLayout（http://www.cnblogs.com/pigtail/archive/2013/01/23/2871627.html）</li>
<li>熟悉CSS规范（http://www.runoob.com/w3cnote/html-css-guide.html#css）</li>
<li>.....其余可自行百度</li>
</ul>
<h6 id="3练习-2">3.练习</h6>
<ul>
<li>百度前端学院任务二--任务八（http://ife.baidu.com/2016/task/all）</li>
</ul>
<h5 id="iii前端切图总结-综合练习">iii.前端切图总结---综合练习</h5>
<ul>
<li>完善自身，总结并做百度任务九（http://ife.baidu.com/2016/task/all）</li>
<li>附加（有兴趣可以做）：百度前端学院任务十--十二</li>
<li>在学习过程中最好不写JavaScript，当然控住不住，还是可以适当写一下的。</li>
</ul>
<h4 id="c附加">c.附加：</h4>
<ul>
<li>Sass和Less学习视频（http://www.imooc.com/course/list?c=sassless）</li>
<li>游戏化学习display：flex（http://flexboxfroggy.com/#zh-cn）</li>
<li>css弹性Flex布局（http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html）</li>
<li>Flexbox属性大全（https://note.youdao.com/share/?id=71219e0def4cb6ca5afbb69c7c408c76&amp;type=note#/）</li>
</ul>
<h3 id="3javascript">3.JavaScript</h3>
<h4 id="ajavascript基础">a.JavaScript基础</h4>
<h5 id="学习目标">学习目标：</h5>
<ul>
<li>熟悉js基础</li>
<li>常见的DOM树操作</li>
<li>熟悉window下的常用全局对象</li>
<li>熟悉json数据</li>
<li>熟悉ES6语法</li>
<li>熟悉代码规范</li>
</ul>
<h5 id="参考资料">参考资料</h5>
<ul>
<li>阮一峰的es6(http://es6.ruanyifeng.com/)和js(http://javascript.ruanyifeng.com/#toc1)</li>
<li>慕课网js基础（https://www.imooc.com/learn/36）</li>
</ul>
<h5 id="参考书籍">参考书籍</h5>
<ul>
<li>JavaScript DOM编程艺术</li>
<li>JavaScript高级程序设计（链接: https://pan.baidu.com/s/1fONBCOeS30rkHBU0mR8NdQ 密码: qriq）</li>
<li>JavaScript精粹</li>
<li>你不知道的JavaScript</li>
<li>JavaScript忍者秘籍</li>
<li>JavaScript函数式编程</li>
<li>高性能JavaScript（链接: https://pan.baidu.com/s/1UsDTSBuBDngCcuMsZKWXEw 密码: pw3s）</li>
<li>自主学习，网上诸多资料</li>
</ul>
<h4 id="必做练习">必做练习</h4>
<ul>
<li>百度前端学院任务十四--十七</li>
<li>JavaScript基本特效</li>
<li>轮播图</li>
<li>弹出层、手风琴菜单</li>
<li>瀑布流布局</li>
<li>....等</li>
</ul>
<h4 id="javascript高级特性">JavaScript高级特性</h4>
<ul>
<li>正则表达式</li>
<li>JavaScrip原型和闭包（http://www.cnblogs.com/wangfupeng1988/p/3977924.html）</li>
<li>JavaScript内存泄漏（http://www.ruanyifeng.com/blog/2017/04/memory-leak.html）</li>
<li>JavaScript的this用法和指向（http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html）</li>
<li>JavaScript的作用域（http://www.cnblogs.com/kikiwu/p/4474074.html）</li>
</ul>
<h4 id="必做练习-2">必做练习</h4>
<ul>
<li>百度前端学院任务十九---二十一</li>
<li>下拉菜单</li>
<li>分页组件</li>
<li>倒计时效果</li>
<li>简易计算器</li>
<li>tab选项卡切换</li>
</ul>
<h4 id="http和ajax编程">HTTP和Ajax编程</h4>
<h5 id="学习目标-2">学习目标</h5>
<ul>
<li>web基础知识</li>
<li>http极少</li>
<li>ajax基本原理<br>
<img src="https://raw.githubusercontent.com/smartBBer/picBox/master/img/007vdmn3gy1g1s4ritcy0j30bj0e5mxd.jpg" alt="" loading="lazy"></li>
</ul>
<h4 id="javascript面向对象进阶">JavaScript面向对象进阶</h4>
<h5 id="参考书籍-2">参考书籍</h5>
<ul>
<li>JavaScript面向对象编程指南（链接: https://pan.baidu.com/s/1PSswVssDsn6tfLXkRd1nqA 密码: zdmt）</li>
<li>JavaScript设计模式（链接: https://pan.baidu.com/s/18gF0hzC9xcmyBwHcKydAZA 密码: mgd2）</li>
<li>一张图理解prototype、proto和constructor的三角关系（http://www.cnblogs.com/xiaohuochai/p/5721552.html）</li>
<li>JavaScript高级程序设计相关章节</li>
</ul>
<h3 id="javascript运动动画">JavaScript运动/动画</h3>
<h4 id="参考资料-2">参考资料</h4>
<ul>
<li>js动画效果（http://www.imooc.com/learn/167）</li>
<li>自行网上查阅并学习</li>
</ul>
<h3 id="jquery基础">jQuery基础</h3>
<h4 id="参考资料-3">参考资料</h4>
<ul>
<li>书籍：锋利的jQuery（最好必看吧）（链接: https://pan.baidu.com/s/19Y-aUqFvHykakWCiBoH7Vg 密码: ajs2）</li>
<li>慕课网jQuery（http://www.imooc.com/course/list?c=jquery&amp;type=1）</li>
<li>李炎恢老师jQuery视频教程（http://study.163.com/course/introduction.htm?courseId=501006）</li>
</ul>
<h3 id="模块化组件开发">模块化组件开发</h3>
<h4 id="参考资料-4">参考资料</h4>
<ul>
<li>require.js官网（http://requirejs.org/）（https://blog.csdn.net/sanxian_li/article/details/39394097）</li>
<li>sea.js官网（http://www.zhangxinxu.com/sp/seajs/）</li>
<li>JavaScript中的模块化之AMD和CMD（https://blog.csdn.net/tyro_java/article/details/51314674）</li>
</ul>
<h3 id="总结练习">总结练习</h3>
<h4 id="实战">实战</h4>
<ul>
<li>响应式网页制作实战项目（链接: https://pan.baidu.com/s/1vsvuj6MYNMVXQeXeFPlxIg 密码: swfe）</li>
<li>webapp书城开发（链接: https://pan.baidu.com/s/1vQHBm0zTEbbQycwEDs59SQ 密码: mqt9）</li>
<li>初级开发工程师实战（链接: https://pan.baidu.com/s/133-pJKChi_OePmql6Xx87w 密码: hj8e）</li>
<li>中级实战（链接: https://pan.baidu.com/s/1dZr-g-j6RozQTVMu6C4Vzw 密码: h5vf）</li>
</ul>
<h3 id="扩展掌握">扩展掌握</h3>
<ul>
<li>canvas和svg</li>
<li>React和redux（http://www.runoob.com/react/react-tutorial.html）</li>
<li>vue（饿了么开发（http://www.runoob.com/react/react-tutorial.html））</li>
<li>7天搞定nodejs微信公众号开发（链接: https://pan.baidu.com/s/12VVtyZIKTSnazA-cJueMYg 密码: wudg）</li>
<li>....等自主网上学习</li>
<li>学习视频
<ul>
<li>链接: https://pan.baidu.com/s/1HxJH6Y6fYblkf9hQcmEXXg 密码: i6fd</li>
<li>链接: https://pan.baidu.com/s/1e49NOJVwgd7XMCo-odHFdw 密码: ymad</li>
<li>链接: https://pan.baidu.com/s/1B0Kn2t50kLlZcxVYWPqgsg 密码: c9ks</li>
<li>链接: https://pan.baidu.com/s/1ouJqfv2qIE0x_AQ6BlKEtg 密码: twrv</li>
</ul>
</li>
</ul>
<h3 id="扩展学习资料汇总">扩展学习资料汇总</h3>
<ul>
<li>https://github.com/jsfront/src/blob/master/qq.md（学习资料汇总）</li>
<li>https://github.com/airyland/Jsource（学习图谱）</li>
<li>https://zhuanlan.zhihu.com/p/23968878?refer=full-stack（面向未来的跨界开发技术）</li>
</ul>
<h3 id="基本学习视频网站">基本学习视频网站</h3>
<ul>
<li>慕课网（https://www.imooc.com/）</li>
<li>极客学院（http://www.jikexueyuan.com/）</li>
<li>网易云课堂（http://study.163.com/category/it）</li>
<li>W3CSchool（https://www.w3cschool.cn/）</li>
<li>菜鸟教程（http://www.runoob.com/）</li>
<li>牛客网（https://www.nowcoder.com/）</li>
<li>火狐开发社区（https://developer.mozilla.org/zh-CN/）</li>
<li>自强学堂（https://code.ziqiangxuetang.com/）</li>
<li>妙味课堂（https://miaov.com/）</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PHP 爬虫]]></title>
        <id>https://tooyi.github.io/post/php-pa-chong/</id>
        <link href="https://tooyi.github.io/post/php-pa-chong/">
        </link>
        <updated>2019-04-02T01:14:30.000Z</updated>
        <summary type="html"><![CDATA[<p>学习参考小结</p>
]]></summary>
        <content type="html"><![CDATA[<p>学习参考小结</p>
<!-- more -->
<h2 id="简单获取百度title">简单获取百度title</h2>
<pre><code class="language-php">&lt;?PHP
   // 通过 file_get_contents 函数获取百度页面源码
   $html = file_get_contents(&quot;https://www.baidu.com/index.html&quot;);

   // 通过 preg_replace 函数使页面源码由多行变单行
   $htmlOneLine = preg_replace(&quot;/\r|\n|\t/&quot;,&quot;&quot;,$html);

   // 通过 preg_match 函数提取获取页面的标题信息
   preg_match(&quot;/&lt;title&gt;(.*)&lt;\/title&gt;/iU&quot;,$htmlOneLine,$titleArr);

   // 由于 preg_match 函数的结果是数组的形式
   $title = $titleArr[1];

   // 通过 echo 函数输出标题信息
   echo $title;
?&gt;
</code></pre>
<h2 id="乱码解决">乱码解决</h2>
<pre><code class="language-php">&lt;?PHP
   // 乱码解决办法，把其他编码格式通过 mb_convert_encoding 函数统一转为 UTF-8 格式
   $html = mb_convert_encoding($html,'UTF-8','UTF-8,GBK,GB2312,BIG5');
   // 还有一种因为gzip所以出现乱码的，我会在以后讲
?&gt;
</code></pre>
<h2 id="获取不到标题信息">获取不到标题信息</h2>
<pre><code class="language-php">&lt;?PHP
// 获取不到标题信息解决办法，首先判断是否能获取到页面源码
// 如果能获取到但还是不能获取到标题信息
// 我猜测的问题是：因为是使用正则表达式获取的，源码没有变成一行，获取起来就会出现问题
$htmlOneLine=preg_replace(&quot;/\r|\n|\t/&quot;,&quot;&quot;,$html);
?&gt;
</code></pre>
<h2 id="获取不到页面源码">获取不到页面源码</h2>
<pre><code class="language-php">&lt;?PHP
   // 像新浪微博你可能获取到的是“Sina Visitor System”
   // 解决办法添加header信息
   $opts = array(
   	'http'=&gt;array(
		'method'=&gt;&quot;GET&quot;,
		&quot;timeout&quot;=&gt;20,
		'header'=&gt;&quot;User-Agent: Spider \r\n&quot;,
   	)
   );
   $context = stream_context_create($opts);
   $html = file_get_contents($domain,0,$context,0,150000);
   // 这样就能获取到新浪微博的页面了
?&gt;
</code></pre>
<h2 id="爬取图片">爬取图片</h2>
<pre><code class="language-php">&lt;?php
header(&quot;Content-type:text/html;Charset=utf-8&quot;);

$ch = curl_init();
$url = &quot;https://pixabay.com/&quot;;
curl_setopt($ch, CURLOPT_USERAGENT, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.113 Safari/537.36&quot;);
curl_setopt($ch, CURLOPT_URL, $url);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
$content = curl_exec($ch);
$string = file_get_contents($url);
preg_match_all(&quot;/&lt;img([^&gt;]*)\s*src=('|\&quot;)([^'\&quot;]+)('|\&quot;)/&quot;,
    $string, $matches);
$new_arr = array_unique($matches[3]);
foreach ($new_arr as $key) {
    echo &quot;&lt;img src=$key&gt;&quot;;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在线学习SQL]]></title>
        <id>https://tooyi.github.io/post/zai-xian-xue-xi-sql/</id>
        <link href="https://tooyi.github.io/post/zai-xian-xue-xi-sql/">
        </link>
        <updated>2019-03-28T01:12:52.000Z</updated>
        <summary type="html"><![CDATA[<p>推荐几个在线学习SQL的网页</p>
]]></summary>
        <content type="html"><![CDATA[<p>推荐几个在线学习SQL的网页</p>
<!-- more -->
<h2 id="sql-fiddle">SQL Fiddle</h2>
<p>地址：<a href="http://sqlfiddle.com/">http://sqlfiddle.com/</a></p>
<p>提供有MySQL5.6、Oracle11g R2、PostgreSQL9.6及9.3、SQLite（WedSQL）、SQLite（SQL.js)、MS SQL Server 2017.</p>
<p>总体体验不错。</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/smartBBer/picBox/master/img/006KCUaNly1g1iphw4eu2j31hw0u0goo.jpg" alt="" loading="lazy"></figure>
<h2 id="sqlzoo">SQLZOO</h2>
<p>地址：<a href="http://zh.sqlzoo.net/wiki/SELECT_basics/zh">http://zh.sqlzoo.net/wiki/SELECT_basics/zh</a></p>
<p>SQL练习网站</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/smartBBer/picBox/master/img/006KCUaNly1g1ipi8mqyjj317y0s5gof.jpg" alt="" loading="lazy"></figure>
<p>做了下前两篇，附上答案。</p>
<h3 id="sqlzoo-前两节-select-basics-和-select-name-的答案">SQLZOO 前两节 SELECT basics 和 SELECT name 的答案。</h3>
<h4 id="select-basic">SELECT basic</h4>
<p>1.修改此例子,以顯示德國 Germany 的人口。</p>
<pre><code>  SELECT population FROM world WHERE name = 'Germany'
</code></pre>
<p>2.修改此例子,查詢面積為 5,000,000 以上平方公里的國家,對每個國家顯示她的名字和人均國內生產總值(gdp/population)。</p>
<pre><code>SELECT name, gdp/population FROM world WHERE area &gt; 5000000
</code></pre>
<p>3.顯示“Ireland 愛爾蘭”,“Iceland 冰島”,“Denmark 丹麥”的國家名稱和人口。</p>
<pre><code>SELECT name, population FROM world WHERE name IN ('Ireland', 'Iceland', 'Denmark');
</code></pre>
<p>4.修改此例子,以顯示面積為 200,000 及 250,000 之間的國家名稱和該國面積。</p>
<pre><code>SELECT name, area FROM world WHERE area BETWEEN 200000 AND 250000
</code></pre>
<h4 id="select-names">SELECT names</h4>
<p>1.找出以 Y 為開首的國家。</p>
<pre><code>SELECT name FROM world WHERE name LIKE 'Y%'
</code></pre>
<p>2.找出以 Y 為結尾的國家。</p>
<pre><code>SELECT name FROM world WHERE name LIKE '%Y'
</code></pre>
<p>3.找出所有國家,其名字包括字母x。</p>
<pre><code>SELECT name FROM world WHERE name LIKE '%x%'
</code></pre>
<p>4.找出所有國家,其名字以 land 作結尾。</p>
<pre><code>SELECT name FROM world WHERE name LIKE '%land'
</code></pre>
<p>5.找出所有國家,其名字以 C 作開始,ia 作結尾。</p>
<pre><code>SELECT name FROM world WHERE name LIKE 'C%ia'
</code></pre>
<p>6.找出所有國家,其名字包括字母oo。</p>
<pre><code>SELECT name FROM world WHERE name LIKE '%oo%'
</code></pre>
<p>7.找出所有國家,其名字包括三個或以上的a。</p>
<pre><code>SELECT name FROM world WHERE name LIKE '%a%a%a%'
</code></pre>
<p>8.找出所有國家,其名字以t作第二個字母。</p>
<pre><code>SELECT name FROM world WHERE name LIKE '_t%' ORDER BY name
</code></pre>
<p>9.找出所有國家,其名字都有兩個字母 o,被另外兩個字母相隔着。</p>
<pre><code>SELECT name FROM world WHERE name LIKE '%o__o%' ORDER BY name
</code></pre>
<p>10.找出所有國家,其名字都是 4 個字母的。</p>
<pre><code>SELECT name FROM world WHERE name LIKE '____'
</code></pre>
<p>11.顯示所有國家名字,其首都和國家名字是相同的</p>
<pre><code>SELECT name FROM world WHERE name = capital
</code></pre>
<p>12.顯示所有國家名字,其首都是國家名字加上” City”。</p>
<pre><code>SELECT name  FROM world WHERE capital = concat(name, ' City')
</code></pre>
<p>13.找出所有首都和其國家名字,而首都要有國家名字中出現。</p>
<pre><code>SELECT capital, name FROM world WHERE capital LIKE concat('%',name,'%')
</code></pre>
<p>14.找出所有首都和其國家名字,而首都是國家名字的延伸。 你應顯示 Mexico City,因它比其國家名字 Mexico 長。 你不應顯示 Luxembourg,因它的首都和國家名相是相同的。</p>
<pre><code>SELECT name, capital FROM world WHERE capital LIKE concat('%',name,'_%')
</code></pre>
<p>15.&quot;Monaco-Ville&quot;是合併國家名字 &quot;Monaco&quot; 和延伸詞&quot;-Ville&quot;.<br>
顯示國家名字，及其延伸詞，如首都是國家名字的延伸。</p>
<pre><code>SELECT name, REPLACE(capital, name, '') FROM world WHERE capital LIKE CONCAT('%',name,'%') AND REPLACE(capital, name, '') &lt;&gt; ''
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Oracle学习小结]]></title>
        <id>https://tooyi.github.io/post/oracle-xue-xi-xiao-jie/</id>
        <link href="https://tooyi.github.io/post/oracle-xue-xi-xiao-jie/">
        </link>
        <updated>2019-03-28T01:10:46.000Z</updated>
        <summary type="html"><![CDATA[<p>最近学习Oracle，做个小总结</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近学习Oracle，做个小总结</p>
<!-- more -->
<h1 id="oracle-预备知识">Oracle 预备知识</h1>
<h2 id="1oracle数据库中查询操作的基本语法">1.Oracle数据库中查询操作的基本语法</h2>
<pre><code class="language-sql">SELECT [ALL|DISTINCT]column_name[,expression…]
FROM  table1_name[,table2_name,view_name,…]
[WHERE condition]
[GROUP BY column_name1[,column_name2,…] [HAVING group_condition]]
[ORDER BY column_name2 [ASC|DESC][,column_name2,…]];
</code></pre>
<h2 id="2常用的统计聚集函数">2.常用的统计（聚集）函数</h2>
<table>
<thead>
<tr>
<th style="text-align:center">函    数</th>
<th style="text-align:center">格    式</th>
<th style="text-align:center">功    能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">COUNT</td>
<td style="text-align:center">COUNT([DISTINCT|ALL] *)</td>
<td style="text-align:center">返回结果集中记录个数</td>
</tr>
<tr>
<td style="text-align:center">COUNT</td>
<td style="text-align:center">COUNT([DISTINCT|ALL] column)</td>
<td style="text-align:center">返回结果集中非空记录个数</td>
</tr>
<tr>
<td style="text-align:center">AVG</td>
<td style="text-align:center">AVG([DISTINCT|ALL] column)</td>
<td style="text-align:center">返回列或表达式的平均值</td>
</tr>
<tr>
<td style="text-align:center">MAX</td>
<td style="text-align:center">MAX([DISTINCT|ALL] column )</td>
<td style="text-align:center">返回列或表达式的最大值</td>
</tr>
<tr>
<td style="text-align:center">MIN</td>
<td style="text-align:center">MIN([DISTINCT|ALL] column )</td>
<td style="text-align:center">返回列或表达式的最小值</td>
</tr>
<tr>
<td style="text-align:center">SUM</td>
<td style="text-align:center">SUM([DISTINCT|ALL] column )</td>
<td style="text-align:center">返回列或表达式的总和</td>
</tr>
<tr>
<td style="text-align:center">STDDEV</td>
<td style="text-align:center">STDDEV(column)</td>
<td style="text-align:center">返回列或表达式的标准差</td>
</tr>
<tr>
<td style="text-align:center">VARIANCE</td>
<td style="text-align:center">VARIANCE(column)</td>
<td style="text-align:center">返回列或表达式的方差</td>
</tr>
</tbody>
</table>
<ul>
<li>除了COUNT(*)函数外，其他的统计函数都不考虑返回值或表达式为NULL的情况。</li>
<li>聚集函数只能出现在目标列表达式、ORDER BY子句、HAVING子句中，不能出现在WHERE子句和GROUP BY子句中。</li>
<li>默认对所有的返回行进行统计，包括重复的行；如果要统计不重复的行信息，则可以使用DISTINCT选项。</li>
<li>如果对查询结果进行了分组，则聚集函数的作用范围为各个组，否则聚集函数作用于整个查询结果。</li>
</ul>
<h2 id="创建表和数据">创建表和数据</h2>
<pre><code class="language-sql">CREATE TABLE customers(
customer_id NUMBER(2) PRIMARY KEY,
name CHAR(10) NOT NULL,
phone VARCHAR(15) NOT NULL,
email VARCHAR(15),
address VARCHAR(30),
code VARCHAR(10)
);

CREATE TABLE publishers(
publisher_id NUMBER(2) PRIMARY KEY,
name VARCHAR(32),
contact CHAR(10),
phone VARCHAR(15)
);

CREATE TABLE books(
isbn VARCHAR(15) PRIMARY KEY,
title VARCHAR(15),
pubdate DATE,
publisher_id NUMBER(2) REFERENCES publishers(publisher_id),
cost NUMBER(4,2),
retail NUMBER(4,2),
category VARCHAR(15)
);

CREATE TABLE authors(
author_id NUMBER(2) PRIMARY KEY,
name VARCHAR(15));
CREATE TABLE bookauthor(
isbn VARCHAR(15) REFERENCES books(isbn),
author_id NUMBER(2) REFERENCES authors(author_id),
primary key(isbn,author_id)
);

CREATE TABLE orders(
order_id NUMBER(2) PRIMARY KEY,
customer_id NUMBER(2) REFERENCES customers(customer_id),
orderdate DATE NOT NULL,
shipdate DATE NOT NULL,
shipaddress VARCHAR(30),
shipcode VARCHAR(10)
);

CREATE TABLE orderitem(
ttem_id NUMBER(2) PRIMARY KEY,
order_id NUMBER(2) REFERENCES orders(order_id),
isbn VARCHAR(15) REFERENCES books(isbn),
quantity NUMBER(2)
);
</code></pre>
<h2 id="瞎写的数据">瞎写的数据</h2>
<pre><code class="language-sql">INSERT INTO customers VALUES(1,'小李','13300000000','1222@qq.com','东莞','122121');
INSERT INTO customers VALUES(2,'小刘','13300000000','1222@qq.com','上海浦东','122121');
INSERT INTO customers VALUES(3,'小王','13300000000','1222@qq.com','北京大学','122121');
INSERT INTO customers VALUES(4,'小张','13300000000','1222@qq.com','清华大学','122121');
insert into customers values(5,'小宋','123456','2222@qq.com','湖南大学','421000' );
insert into customers values(6,'小岳','234567','1111@qq.com','北京中关村','421000' );

insert into publishers values(1,'东四出版社','给予','345678');
insert into publishers values(2,'清华大学出版社','清华','345678');
insert into publishers values(3,'电子工业出版社','电工','345678');

insert into books values('0001','数据结构',sysdate,1,25.25,30.00,'计算机类');
insert into books values('0002','算法设计',to_date('2009-01-01','yyyy-mm-dd'),1,34.24,42.00,'计算机类');
insert into books values('0003','python',to_date('1996-12-03','yyyy-mm-dd') ,1,34.24,41.00,'计算机类');
insert into books values('0004','数据库大全',to_date('1990-12-03','yyyy-mm-dd') ,2,34.24,90.00,'计算机类');
insert into books values('0005','Oracle解读',to_date('2007-02-03','yyyy-mm-dd') ,3,34.40,90.00,'计算机类');
insert into books values('0006','java',to_date('2007-02-03','yyyy-mm-dd') ,1,34.40,90.00,'计算机类');
insert into books values('0007','大海',sysdate,1,25.25,30.00,'文学类');
insert into books values('0008','非我',sysdate,1,25.25,30.00,'哲学类');

insert into authors values(1,'廖雪峰');
insert into authors values(2,'唐三');

insert into bookauthor values('0001',1);
insert into bookauthor values('0002',2);

insert into orders values(1,1,sysdate,sysdate,'新华书店','421000');
insert into orders values(2,2,to_date ( '2007-11-20 18:31:34' , 'YYYY-MM-DD HH24:MI:SS' ),to_date ( '2007-12-30 18:31:34' , 'YYYY-MM-DD HH24:MI:SS' ),'新华书店','421000');
insert into orders values(3,3,sysdate,sysdate,'电子工业出版社','421000');
insert into orders values(4,4,to_date ( '2007-12-20 18:31:34' , 'YYYY-MM-DD HH24:MI:SS' ),to_date ( '2007-12-21 18:31:34' , 'YYYY-MM-DD HH24:MI:SS' ),'清华大学出版社','421000');

insert into orderitem values(1,1,'0001',20);
insert into orderitem values(2,2,'0002',20);
</code></pre>
<h2 id="查询">查询</h2>
<p>以下查询基于图书销售系统表</p>
<p>（1） 查询当前所有客户信息。</p>
<pre><code class="language-sql">select * from customers;
</code></pre>
<p>（2） 查询图书ISBN、书名、批发价以及零售价信息。</p>
<pre><code class="language-sql">select isbn,title,cost,retail from books;
</code></pre>
<p>（3） 查询所有图书的种类。</p>
<pre><code class="language-sql">select DISTINCT category from books;
</code></pre>
<p>（4） 查询图书ISBN、图书名及作者名信息。</p>
<pre><code class="language-sql">select books.isbn,books.title,authors.name from books inner join bookauthor on books.isbn=bookauthor.isbn join authors on authors.author_id=bookauthor.author_id;
</code></pre>
<p>（5） 查询所有订单信息。</p>
<pre><code class="language-sql">select * from orders;
</code></pre>
<p>（6） 查询所有出版社信息。</p>
<pre><code class="language-sql">select * from publishers;
</code></pre>
<p>（7） 查询所有订单明细信息。</p>
<pre><code class="language-sql">select * from orderitem;
</code></pre>
<p>（8） 查询出版日期在2009年1月1日之后的图书信息。</p>
<pre><code class="language-sql">select * from books where pubdate &gt; to_date('2009-01-01','yyyy-mm-dd');
</code></pre>
<p>（9） 查询所有图书ISBN、图书名、出版日期，并按出版日期降序排序。</p>
<pre><code class="language-sql">select isbn,title,pubdate from books order by pubdate desc;
</code></pre>
<p>（10）  查询所有图书ISBN、图书名、出版社、出版日期，按批发价格排序，对于批发价相同的，再按零售价排序。</p>
<pre><code class="language-sql">select * from books inner join publishers on books.publisher_id=publishers.publisher_id order by cost,retail;
</code></pre>
<p>（11）  查询图书名以“数据库”开头的图书信息。</p>
<pre><code class="language-sql">select * from books where title like '数据库%';
</code></pre>
<p>（12）  查询所有书名中包含“Oracle”的图书信息。</p>
<pre><code class="language-sql">select * from books where title like '%Oracle%';
</code></pre>
<p>（13）  查询出版日期在2007年1月至2009年1月的所有图书。</p>
<pre><code class="language-sql">select * from books where pubdate &gt;= to_date('2007-01-01','yyyy-mm-dd') and pubdate &lt;= to_date('2009-1-31','yyyy-mm-dd');
</code></pre>
<p>（14）  查询“电子工业出版社”和“清华大学出版社”出版的图书。</p>
<pre><code class="language-sql">select * from books join publishers on books.publisher_id=publishers.publisher_id and (publishers.name like '清华大学出版社' or publishers.name like '电子工业出版社');
</code></pre>
<p>（15）  查询所有订单信息，按订单日期排序。对于订单日期相同的，再按发货日期排序。</p>
<pre><code class="language-sql">select * from orders order by orderdate,shipdate; 
</code></pre>
<p>（16）  查询所有发货日期比订货日期晚７天的订单信息。</p>
<pre><code class="language-sql">select * from orders where (to_number(shipdate-orderdate))&gt;=7; 
</code></pre>
<p>（17）  统计各类图书的数量，平均零售价格、平均批发价格。</p>
<pre><code class="language-sql">select category,count(*),avg(retail),avg(cost) from books GROUP BY category;
</code></pre>
<p>（18）  统计各个出版社出版图书的数量、最高批发价格、最高零售价格、最低批发价格和最低零售价格。</p>
<pre><code class="language-sql">select name,count(*),max(cost),max(retail),min(cost),min(retail) from books join publishers on books.publisher_id =publishers.publisher_id GROUP BY name;
</code></pre>
<p>（19）  统计每个客户的订单数量。</p>
<pre><code class="language-sql">select name,count(*) from orders join customers on orders.customer_id=customers.customer_id group by name;
</code></pre>
<p>（20）  统计每个作者编写的图书数量。</p>
<pre><code class="language-sql">select name,count(*) from bookauthor join authors on authors.author_id=bookauthor.author_id group by name;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nginx 命令]]></title>
        <id>https://tooyi.github.io/post/nginx/</id>
        <link href="https://tooyi.github.io/post/nginx/">
        </link>
        <updated>2019-03-03T01:05:54.000Z</updated>
        <summary type="html"><![CDATA[<p>Windows下Nginx的启动、停止等命令</p>
]]></summary>
        <content type="html"><![CDATA[<p>Windows下Nginx的启动、停止等命令</p>
<!-- more -->
<h2 id="windows下nginx的启动-停止等命令">Windows下Nginx的启动、停止等命令</h2>
<p>在Windows下使用Nginx，我们需要掌握一些基本的操作命令，比如：启动、停止Nginx服务，重新载入Nginx等，下面我就进行一些简单的介绍。</p>
<h3 id="1-启动">1、启动：</h3>
<p>C:\server\nginx-1.0.2&gt;start nginx或<br>
C:\server\nginx-1.0.2&gt;nginx.exe</p>
<h3 id="2-停止">2、停止：</h3>
<p>C:\server\nginx-1.0.2&gt;nginx.exe -s stop或<br>
C:\server\nginx-1.0.2&gt;nginx.exe -s quit</p>
<blockquote>
<p>注：stop是快速停止nginx，可能并不保存相关信息；quit是完整有序的停止nginx，并保存相关信息。</p>
</blockquote>
<h3 id="3-配置文件修改重新载入nginx">3、配置文件修改重新载入Nginx：</h3>
<p>C:\server\nginx-1.0.2&gt;nginx.exe -s reload<br>
当配置信息修改，需要重新载入这些配置时使用此命令。</p>
<h3 id="4-重新打开日志文件">4、重新打开日志文件：</h3>
<p>C:\server\nginx-1.0.2&gt;nginx.exe -s reopen</p>
<h3 id="5-查看nginx版本">5、查看Nginx版本：</h3>
<p>C:\server\nginx-1.0.2&gt;nginx -v</p>
<h3 id="6-验证配置是否正确">6、验证配置是否正确:</h3>
<p>C:\server\nginx-1.0.2&gt;nginx -t</p>
<h3 id="7查看是否启动成功">7.查看是否启动成功：</h3>
<p>C:\server\nginx-1.0.2&gt;tasklist /fi &quot;imagename eq nginx.exe&quot;</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[WNMP 配置]]></title>
        <id>https://tooyi.github.io/post/wnmp/</id>
        <link href="https://tooyi.github.io/post/wnmp/">
        </link>
        <updated>2019-03-03T01:05:54.000Z</updated>
        <summary type="html"><![CDATA[<p>win10 + nginx + php7 + mysql</p>
]]></summary>
        <content type="html"><![CDATA[<p>win10 + nginx + php7 + mysql</p>
<!-- more -->
<h2 id="1首先需要的应用程序包">1.首先需要的应用程序包。</h2>
<p>PHP: <a href='https://windows.php.net/download' target='_blank'>VC15 x64 Non Thread Safe (2019-Feb-06 02:14:41)</a>（nginx 下 php 是以 FastCGI 的方式运行，所以我们下载非线程安全也就是nts的php包）</p>
<p>Nginx: <a href = 'http://nginx.org/en/download.html' target='_blank'>nginx/Windows-1.14.2</a> （下载 stable version）</p>
<p>MySql：<a href='https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.15-winx64.zip' target='_blank'>mysql-8.0.15-winx64.zip</a></p>
<p>MySql8.xx 的可以参考这个贴 <a href='https://blog.csdn.net/qq_37350706/article/details/81707862' target='_blank'>MySQL 8.0.15安装教程(windows 64位)</a></p>
<p>附一个用了比较久的 MySql 界面管理器</p>
<p>免费的 Navicat Premium 非商业版许可证：<a href = 'https://www.navicat.com.cn/sponsorship/education/student' target = '_blank'>学术伙伴计划 - 学生</a> 有一个教育邮箱就可以申请</p>
<h2 id="2安装与配置">2.安装与配置。</h2>
<h3 id="1php安装与配置">1）php安装与配置。</h3>
<p>将下载好的 php 包文件解压到某一个目录下，例如我的是：D:\wnmp。把解压后的文件目录改为 php7，将里面的 php.ini-production 文件复制一份并改名为 php.ini，用文本编辑器将它打开。</p>
<pre><code class="language-ini">;将里面的
; On windows:

extension_dir = &quot;./txt&quot;
;改为

; On windows:

extension_dir = &quot;D:/wnmp/php7/ext&quot;
</code></pre>
<p>将下面两个扩展前面的“;”去掉。（因为 php7 不支持 mysql 扩展了，所以这里只有 mysqli 和 pdo 扩展)</p>
<pre><code class="language-ini">;extension=mysqli 

;extension=pdo_mysql

;extension=openssl
</code></pre>
<p>最后让PHP支持 nginx，将下面一行前面的“;”去掉。</p>
<pre><code class="language-ini">;cgi.fix_pathinfo=1
</code></pre>
<h3 id="2nginx-安装与配置">2）nginx 安装与配置。</h3>
<p>先在 D:/wnmp 目录下新建一个 www 文件夹，作为服务器的根目录。</p>
<p>将下载好的 nginx 包文件解压到D:\wnmp目录下，重命名为 nginx。打开 nginx\conf 下的 nginx.conf 文件来配置 nginx。</p>
<pre><code class="language-conf">#将一下代码

location/ {
    root html;
    index index.html index.htm;
}

#改为

location/ {
root D:/wnmp/www; #将站点的根目录定位到 D:/wnmp/www

index index.html index.htm;
}  

#再将一下代码

# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
#
#location ~ \.php$ {
# root html;
# fastcgi_pass 127.0.0.1:9000;
# fastcgi_index index.php;
# fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name;
# include fastcgi_params;
#}

#改为
# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
#

location ~ \.php$ {
    root           D:/wnmp/www;
    fastcgi_pass   localhost:9000;
    fastcgi_index  index.php;
    
    # 这里$document_root指的是上面定义好的nginx根目录：D:/wnmp/www

    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
    include        fastcgi_params;
}
#保存好配置即可。
</code></pre>
<h2 id="3启动">3.启动。</h2>
<p>手动启动 php 和 nginx 来跑一下。</p>
<h3 id="1命令行php目录下键入-php-cgiexe-b-1270019000-c-dwnmpphp7phpini输入以后没有反应但是不能关掉命令行">1）命令行php目录下键入 php-cgi.exe -b 127.0.0.1:9000 -c D:/wnmp/php7/php.ini（输入以后没有反应，但是不能关掉命令行）</h3>
<h3 id="2命令行nginx目录下-start-nginx">2）命令行nginx目录下 start nginx</h3>
<h3 id="3在www目录下新建一个-phpinfophp-文件">3）在www目录下新建一个 phpinfo.php 文件</h3>
<pre><code>&lt;?php 
    phpinfo();
?&gt;
</code></pre>
<h3 id="4浏览器中输入-a-hrefhttplocalhostphpinfophp-target_blanklocalhostphpinfophpa-或者-a-hrefhttp127001phpinfophp-target_blank127001phpinfophpa出现下面内容则说明php在nginx中运行成功了">4）浏览器中输入 <a href='http://localhost/phpinfo.php' target='_blank'>localhost/phpinfo.php</a> 或者 <a href='http://127.0.0.1/phpinfo.php' target='_blank'>127.0.0.1/phpinfo.php</a>，出现下面内容则说明php在nginx中运行成功了。</h3>
<figure data-type="image" tabindex="1"><img src="http://ww1.sinaimg.cn/large/006KCUaNgy1g0og4i2gzfj30qi0gl77i.jpg" alt="成功啦" loading="lazy"></figure>
<p>本文参考 <a href="http://www.cnblogs.com/huayangmeng/archive/2011/06/15/2081337.html">http://www.cnblogs.com/huayangmeng/archive/2011/06/15/2081337.html</a></p>
]]></content>
    </entry>
</feed>